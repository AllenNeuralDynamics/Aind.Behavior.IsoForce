<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: Entity Relationship Diagram created by erdantic Pages: 1 -->
<svg width="1458pt" height="362pt"
 viewBox="0.00 0.00 1458.00 361.50" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 357.5)">
<title>Entity Relationship Diagram created by erdantic</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-357.5 1454,-357.5 1454,4 -4,4"/>
<text text-anchor="middle" x="725" y="-6.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="9.00" fill="#a8a8a8">Created by erdantic v1.2.0 &lt;https://github.com/drivendataorg/erdantic&gt;</text>
<!-- aind_behavior_iso_force.task_logic.AindIsoForceTaskLogic -->
<g id="node1" class="node">
<title>aind_behavior_iso_force.task_logic.AindIsoForceTaskLogic</title>
<g id="a_node1"><a xlink:title="aind_behavior_iso_force.task_logic.AindIsoForceTaskLogic&#10;&#10;Base class for all Tasks. A new Task can be created by:&#10; &#160;&#160;&#160;&#45; Subclassing: class NewTask(TaskParameters)&#10; &#160;&#160;&#160;&#45; Using the factory method: create_task(...)&#10; &#160;&#160;&#160;&#45; Passing a type to the generic base: NewTask = Task[MyParameters]&#10;Holds Task metadata and parameters.&#10;">
<polygon fill="none" stroke="black" points="0,-332.5 0,-353.5 262,-353.5 262,-332.5 0,-332.5"/>
<text text-anchor="start" x="61.5" y="-340.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">AindIsoForceTaskLogic</text>
<polygon fill="none" stroke="black" points="0,-311.5 0,-332.5 95,-332.5 95,-311.5 0,-311.5"/>
<text text-anchor="start" x="32" y="-318.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">name</text>
<polygon fill="none" stroke="black" points="95,-311.5 95,-332.5 262,-332.5 262,-311.5 95,-311.5"/>
<text text-anchor="start" x="116.5" y="-318.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[&#39;AindIsoForce&#39;]</text>
<polygon fill="none" stroke="black" points="0,-290.5 0,-311.5 95,-311.5 95,-290.5 0,-290.5"/>
<text text-anchor="start" x="17" y="-297.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">description</text>
<polygon fill="none" stroke="black" points="95,-290.5 95,-311.5 262,-311.5 262,-290.5 95,-290.5"/>
<text text-anchor="start" x="171.5" y="-297.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="0,-269.5 0,-290.5 95,-290.5 95,-269.5 0,-269.5"/>
<text text-anchor="start" x="3" y="-276.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">task_parameters</text>
<polygon fill="none" stroke="black" points="95,-269.5 95,-290.5 262,-290.5 262,-269.5 95,-269.5"/>
<text text-anchor="start" x="98" y="-276.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">AindIsoForceTaskParameters</text>
<polygon fill="none" stroke="black" points="0,-248.5 0,-269.5 95,-269.5 95,-248.5 0,-248.5"/>
<text text-anchor="start" x="27.5" y="-255.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">version</text>
<polygon fill="none" stroke="black" points="95,-248.5 95,-269.5 262,-269.5 262,-248.5 95,-248.5"/>
<text text-anchor="start" x="128.5" y="-255.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[&#39;0.0.0&#45;rc0&#39;]</text>
<polygon fill="none" stroke="black" points="0,-227.5 0,-248.5 95,-248.5 95,-227.5 0,-227.5"/>
<text text-anchor="start" x="15" y="-234.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">stage_name</text>
<polygon fill="none" stroke="black" points="95,-227.5 95,-248.5 262,-248.5 262,-227.5 95,-227.5"/>
<text text-anchor="start" x="143.5" y="-234.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[str]</text>
</a>
</g>
</g>
<!-- aind_behavior_iso_force.task_logic.AindIsoForceTaskParameters -->
<g id="node2" class="node">
<title>aind_behavior_iso_force.task_logic.AindIsoForceTaskParameters</title>
<g id="a_node2"><a xlink:title="aind_behavior_iso_force.task_logic.AindIsoForceTaskParameters&#10;&#10;Same as AindBehaviorModel w/ extra = &quot;allow&quot;.&#10;Helpful for deserialization of nested subclasses.&#10;">
<polygon fill="none" stroke="black" points="370,-268.5 370,-289.5 680,-289.5 680,-268.5 370,-268.5"/>
<text text-anchor="start" x="437.5" y="-276.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">AindIsoForceTaskParameters</text>
<polygon fill="none" stroke="black" points="370,-247.5 370,-268.5 578,-268.5 578,-247.5 370,-247.5"/>
<text text-anchor="start" x="449.5" y="-254.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">rng_seed</text>
<polygon fill="none" stroke="black" points="578,-247.5 578,-268.5 680,-268.5 680,-247.5 578,-247.5"/>
<text text-anchor="start" x="588" y="-254.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[float]</text>
<polygon fill="none" stroke="black" points="370,-226.5 370,-247.5 578,-247.5 578,-226.5 370,-226.5"/>
<text text-anchor="start" x="373" y="-233.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">aind_behavior_services_pkg_version</text>
<polygon fill="none" stroke="black" points="578,-226.5 578,-247.5 680,-247.5 680,-226.5 578,-226.5"/>
<text text-anchor="start" x="586.5" y="-233.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[&#39;0.12.3&#39;]</text>
<polygon fill="none" stroke="black" points="370,-205.5 370,-226.5 578,-226.5 578,-205.5 370,-205.5"/>
<text text-anchor="start" x="439" y="-212.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">environment</text>
<polygon fill="none" stroke="black" points="578,-205.5 578,-226.5 680,-226.5 680,-205.5 578,-205.5"/>
<text text-anchor="start" x="593" y="-212.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Environment</text>
<polygon fill="none" stroke="black" points="370,-184.5 370,-205.5 578,-205.5 578,-184.5 370,-184.5"/>
<text text-anchor="start" x="425.5" y="-191.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">operation_control</text>
<polygon fill="none" stroke="black" points="578,-184.5 578,-205.5 680,-205.5 680,-184.5 578,-184.5"/>
<text text-anchor="start" x="581" y="-191.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">OperationControl</text>
</a>
</g>
</g>
<!-- aind_behavior_iso_force.task_logic.AindIsoForceTaskLogic&#45;&gt;aind_behavior_iso_force.task_logic.AindIsoForceTaskParameters -->
<g id="edge1" class="edge">
<title>aind_behavior_iso_force.task_logic.AindIsoForceTaskLogic:e&#45;&gt;aind_behavior_iso_force.task_logic.AindIsoForceTaskParameters:w</title>
<path fill="none" stroke="black" d="M272.12,-279.5C307,-279.5 321.76,-279.5 354.67,-279.5"/>
<polyline fill="none" stroke="black" points="262,-279.5 267,-279.5 "/>
<polyline fill="none" stroke="black" points="267,-279.5 272,-279.5 "/>
<polyline fill="none" stroke="black" points="370,-279.5 365,-279.5 "/>
<polygon fill="black" stroke="black" points="364,-274.5 364,-284.5 362,-284.5 362,-274.5 364,-274.5"/>
<polyline fill="none" stroke="black" points="365,-279.5 360,-279.5 "/>
<polygon fill="black" stroke="black" points="359,-274.5 359,-284.5 357,-284.5 357,-274.5 359,-274.5"/>
<polyline fill="none" stroke="black" points="360,-279.5 355,-279.5 "/>
</g>
<!-- aind_behavior_iso_force.task_logic.Environment -->
<g id="node3" class="node">
<title>aind_behavior_iso_force.task_logic.Environment</title>
<g id="a_node3"><a xlink:title="aind_behavior_iso_force.task_logic.Environment&#10;&#10;!!! abstract &quot;Usage Documentation&quot;&#10; &#160;&#160;&#160;[Models](../concepts/models.md)&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="788.5,-254.5 788.5,-275.5 991.5,-275.5 991.5,-254.5 788.5,-254.5"/>
<text text-anchor="start" x="851" y="-262.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">Environment</text>
<polygon fill="none" stroke="black" points="788.5,-233.5 788.5,-254.5 878.5,-254.5 878.5,-233.5 788.5,-233.5"/>
<text text-anchor="start" x="791.5" y="-240.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">block_statistics</text>
<polygon fill="none" stroke="black" points="878.5,-233.5 878.5,-254.5 991.5,-254.5 991.5,-233.5 878.5,-233.5"/>
<text text-anchor="start" x="881.5" y="-240.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">list[BlockStatistics]</text>
<polygon fill="none" stroke="black" points="788.5,-212.5 788.5,-233.5 878.5,-233.5 878.5,-212.5 788.5,-212.5"/>
<text text-anchor="start" x="814.5" y="-219.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">shuffle</text>
<polygon fill="none" stroke="black" points="878.5,-212.5 878.5,-233.5 991.5,-233.5 991.5,-212.5 878.5,-212.5"/>
<text text-anchor="start" x="922.5" y="-219.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">bool</text>
<polygon fill="none" stroke="black" points="788.5,-191.5 788.5,-212.5 878.5,-212.5 878.5,-191.5 788.5,-191.5"/>
<text text-anchor="start" x="798.5" y="-198.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">repeat_count</text>
<polygon fill="none" stroke="black" points="878.5,-191.5 878.5,-212.5 991.5,-212.5 991.5,-191.5 878.5,-191.5"/>
<text text-anchor="start" x="899.5" y="-198.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[int]</text>
</a>
</g>
</g>
<!-- aind_behavior_iso_force.task_logic.AindIsoForceTaskParameters&#45;&gt;aind_behavior_iso_force.task_logic.Environment -->
<g id="edge2" class="edge">
<title>aind_behavior_iso_force.task_logic.AindIsoForceTaskParameters:e&#45;&gt;aind_behavior_iso_force.task_logic.Environment:w</title>
<path fill="none" stroke="black" d="M690.17,-216.17C728.53,-221.43 737.04,-256.15 772.83,-263.95"/>
<polyline fill="none" stroke="black" points="680,-215.5 684.99,-215.83 "/>
<polyline fill="none" stroke="black" points="684.99,-215.83 689.98,-216.16 "/>
<polyline fill="none" stroke="black" points="788,-265.5 783.03,-264.99 "/>
<polygon fill="black" stroke="black" points="782.54,-259.91 781.52,-269.86 779.53,-269.66 780.55,-259.71 782.54,-259.91"/>
<polyline fill="none" stroke="black" points="783.03,-264.99 778.05,-264.48 "/>
<polygon fill="black" stroke="black" points="777.57,-259.41 776.55,-269.35 774.56,-269.15 775.58,-259.2 777.57,-259.41"/>
<polyline fill="none" stroke="black" points="778.05,-264.48 773.08,-263.97 "/>
</g>
<!-- aind_behavior_iso_force.task_logic.OperationControl -->
<g id="node4" class="node">
<title>aind_behavior_iso_force.task_logic.OperationControl</title>
<g id="a_node4"><a xlink:title="aind_behavior_iso_force.task_logic.OperationControl&#10;&#10;!!! abstract &quot;Usage Documentation&quot;&#10; &#160;&#160;&#160;[Models](../concepts/models.md)&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="806.5,-134.5 806.5,-155.5 973.5,-155.5 973.5,-134.5 806.5,-134.5"/>
<text text-anchor="start" x="837" y="-142.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">OperationControl</text>
<polygon fill="none" stroke="black" points="806.5,-113.5 806.5,-134.5 840.5,-134.5 840.5,-113.5 806.5,-113.5"/>
<text text-anchor="start" x="809.5" y="-120.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">force</text>
<polygon fill="none" stroke="black" points="840.5,-113.5 840.5,-134.5 973.5,-134.5 973.5,-113.5 840.5,-113.5"/>
<text text-anchor="start" x="843.5" y="-120.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">ForceOperationControl</text>
</a>
</g>
</g>
<!-- aind_behavior_iso_force.task_logic.AindIsoForceTaskParameters&#45;&gt;aind_behavior_iso_force.task_logic.OperationControl -->
<g id="edge3" class="edge">
<title>aind_behavior_iso_force.task_logic.AindIsoForceTaskParameters:e&#45;&gt;aind_behavior_iso_force.task_logic.OperationControl:w</title>
<path fill="none" stroke="black" d="M689.99,-194.02C735.78,-189.42 747.09,-153.62 790.27,-146.67"/>
<polyline fill="none" stroke="black" points="680,-194.5 684.99,-194.26 "/>
<polyline fill="none" stroke="black" points="684.99,-194.26 689.99,-194.02 "/>
<polyline fill="none" stroke="black" points="805.5,-145.5 800.51,-145.88 "/>
<polygon fill="black" stroke="black" points="799.14,-140.97 799.9,-150.94 797.91,-151.1 797.14,-141.13 799.14,-140.97"/>
<polyline fill="none" stroke="black" points="800.51,-145.88 795.53,-146.26 "/>
<polygon fill="black" stroke="black" points="794.15,-141.35 794.91,-151.33 792.92,-151.48 792.16,-141.51 794.15,-141.35"/>
<polyline fill="none" stroke="black" points="795.53,-146.26 790.54,-146.65 "/>
</g>
<!-- aind_behavior_iso_force.task_logic.ForceOperationControl -->
<g id="node5" class="node">
<title>aind_behavior_iso_force.task_logic.ForceOperationControl</title>
<g id="a_node5"><a xlink:title="aind_behavior_iso_force.task_logic.ForceOperationControl&#10;&#10;!!! abstract &quot;Usage Documentation&quot;&#10; &#160;&#160;&#160;[Models](../concepts/models.md)&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1099.5,-112.5 1099.5,-133.5 1244.5,-133.5 1244.5,-112.5 1099.5,-112.5"/>
<text text-anchor="start" x="1102.5" y="-120.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">ForceOperationControl</text>
<polygon fill="none" stroke="black" points="1099.5,-91.5 1099.5,-112.5 1145.5,-112.5 1145.5,-91.5 1099.5,-91.5"/>
<text text-anchor="start" x="1113" y="-98.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">left</text>
<polygon fill="none" stroke="black" points="1145.5,-91.5 1145.5,-112.5 1244.5,-112.5 1244.5,-91.5 1145.5,-91.5"/>
<text text-anchor="start" x="1155.5" y="-98.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">LoadCellInput</text>
<polygon fill="none" stroke="black" points="1099.5,-70.5 1099.5,-91.5 1145.5,-91.5 1145.5,-70.5 1099.5,-70.5"/>
<text text-anchor="start" x="1109.5" y="-77.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">right</text>
<polygon fill="none" stroke="black" points="1145.5,-70.5 1145.5,-91.5 1244.5,-91.5 1244.5,-70.5 1145.5,-70.5"/>
<text text-anchor="start" x="1155.5" y="-77.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">LoadCellInput</text>
<polygon fill="none" stroke="black" points="1099.5,-49.5 1099.5,-70.5 1145.5,-70.5 1145.5,-49.5 1099.5,-49.5"/>
<text text-anchor="start" x="1109.5" y="-56.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">push</text>
<polygon fill="none" stroke="black" points="1145.5,-49.5 1145.5,-70.5 1244.5,-70.5 1244.5,-49.5 1145.5,-49.5"/>
<text text-anchor="start" x="1155.5" y="-56.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">LoadCellInput</text>
<polygon fill="none" stroke="black" points="1099.5,-28.5 1099.5,-49.5 1145.5,-49.5 1145.5,-28.5 1099.5,-28.5"/>
<text text-anchor="start" x="1111.5" y="-35.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">pull</text>
<polygon fill="none" stroke="black" points="1145.5,-28.5 1145.5,-49.5 1244.5,-49.5 1244.5,-28.5 1145.5,-28.5"/>
<text text-anchor="start" x="1155.5" y="-35.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">LoadCellInput</text>
</a>
</g>
</g>
<!-- aind_behavior_iso_force.task_logic.OperationControl&#45;&gt;aind_behavior_iso_force.task_logic.ForceOperationControl -->
<g id="edge8" class="edge">
<title>aind_behavior_iso_force.task_logic.OperationControl:e&#45;&gt;aind_behavior_iso_force.task_logic.ForceOperationControl:w</title>
<path fill="none" stroke="black" d="M984.7,-123.5C1026.82,-123.5 1043.62,-123.5 1083.75,-123.5"/>
<polyline fill="none" stroke="black" points="974.5,-123.5 979.5,-123.5 "/>
<polyline fill="none" stroke="black" points="979.5,-123.5 984.5,-123.5 "/>
<polyline fill="none" stroke="black" points="1099,-123.5 1094,-123.5 "/>
<polygon fill="black" stroke="black" points="1093,-118.5 1093,-128.5 1091,-128.5 1091,-118.5 1093,-118.5"/>
<polyline fill="none" stroke="black" points="1094,-123.5 1089,-123.5 "/>
<polygon fill="black" stroke="black" points="1088,-118.5 1088,-128.5 1086,-128.5 1086,-118.5 1088,-118.5"/>
<polyline fill="none" stroke="black" points="1089,-123.5 1084,-123.5 "/>
</g>
<!-- aind_behavior_iso_force.task_logic.LoadCellInput -->
<g id="node6" class="node">
<title>aind_behavior_iso_force.task_logic.LoadCellInput</title>
<g id="a_node6"><a xlink:title="aind_behavior_iso_force.task_logic.LoadCellInput&#10;&#10;!!! abstract &quot;Usage Documentation&quot;&#10; &#160;&#160;&#160;[Models](../concepts/models.md)&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1352,-59.5 1352,-80.5 1450,-80.5 1450,-59.5 1352,-59.5"/>
<text text-anchor="start" x="1358" y="-67.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">LoadCellInput</text>
<polygon fill="none" stroke="black" points="1352,-38.5 1352,-59.5 1419,-59.5 1419,-38.5 1352,-38.5"/>
<text text-anchor="start" x="1364" y="-45.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">channel</text>
<polygon fill="none" stroke="black" points="1419,-38.5 1419,-59.5 1450,-59.5 1450,-38.5 1419,-38.5"/>
<text text-anchor="start" x="1427" y="-45.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">int</text>
<polygon fill="none" stroke="black" points="1352,-17.5 1352,-38.5 1419,-38.5 1419,-17.5 1352,-17.5"/>
<text text-anchor="start" x="1355" y="-24.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">is_inverted</text>
<polygon fill="none" stroke="black" points="1419,-17.5 1419,-38.5 1450,-38.5 1450,-17.5 1419,-17.5"/>
<text text-anchor="start" x="1422" y="-24.3" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">bool</text>
</a>
</g>
</g>
<!-- aind_behavior_iso_force.task_logic.ForceOperationControl&#45;&gt;aind_behavior_iso_force.task_logic.LoadCellInput -->
<g id="edge4" class="edge">
<title>aind_behavior_iso_force.task_logic.ForceOperationControl:e&#45;&gt;aind_behavior_iso_force.task_logic.LoadCellInput:w</title>
<path fill="none" stroke="black" d="M1254.22,-102.02C1290.43,-98.52 1302.65,-76.82 1336.61,-71.62"/>
<polyline fill="none" stroke="black" points="1244,-102.5 1248.99,-102.27 "/>
<polyline fill="none" stroke="black" points="1248.99,-102.27 1253.99,-102.03 "/>
<polyline fill="none" stroke="black" points="1352,-70.5 1347.01,-70.86 "/>
<polygon fill="black" stroke="black" points="1345.65,-65.95 1346.38,-75.92 1344.38,-76.07 1343.66,-66.09 1345.65,-65.95"/>
<polyline fill="none" stroke="black" points="1347.01,-70.86 1342.03,-71.23 "/>
<polygon fill="black" stroke="black" points="1340.67,-66.31 1341.39,-76.29 1339.4,-76.43 1338.67,-66.46 1340.67,-66.31"/>
<polyline fill="none" stroke="black" points="1342.03,-71.23 1337.04,-71.59 "/>
</g>
<!-- aind_behavior_iso_force.task_logic.ForceOperationControl&#45;&gt;aind_behavior_iso_force.task_logic.LoadCellInput -->
<g id="edge5" class="edge">
<title>aind_behavior_iso_force.task_logic.ForceOperationControl:e&#45;&gt;aind_behavior_iso_force.task_logic.LoadCellInput:w</title>
<path fill="none" stroke="black" d="M1254.22,-38.98C1290.43,-42.48 1302.65,-64.18 1336.61,-69.38"/>
<polyline fill="none" stroke="black" points="1244,-38.5 1248.99,-38.73 "/>
<polyline fill="none" stroke="black" points="1248.99,-38.73 1253.99,-38.97 "/>
<polyline fill="none" stroke="black" points="1352,-70.5 1347.01,-70.14 "/>
<polygon fill="black" stroke="black" points="1346.38,-65.08 1345.65,-75.05 1343.66,-74.91 1344.38,-64.93 1346.38,-65.08"/>
<polyline fill="none" stroke="black" points="1347.01,-70.14 1342.03,-69.77 "/>
<polygon fill="black" stroke="black" points="1341.39,-64.71 1340.67,-74.69 1338.67,-74.54 1339.4,-64.57 1341.39,-64.71"/>
<polyline fill="none" stroke="black" points="1342.03,-69.77 1337.04,-69.41 "/>
</g>
<!-- aind_behavior_iso_force.task_logic.ForceOperationControl&#45;&gt;aind_behavior_iso_force.task_logic.LoadCellInput -->
<g id="edge6" class="edge">
<title>aind_behavior_iso_force.task_logic.ForceOperationControl:e&#45;&gt;aind_behavior_iso_force.task_logic.LoadCellInput:w</title>
<path fill="none" stroke="black" d="M1254.17,-59.67C1289.16,-60.9 1303.62,-68.27 1336.61,-70.09"/>
<polyline fill="none" stroke="black" points="1244,-59.5 1249,-59.59 "/>
<polyline fill="none" stroke="black" points="1249,-59.59 1254,-59.67 "/>
<polyline fill="none" stroke="black" points="1352,-70.5 1347,-70.37 "/>
<polygon fill="black" stroke="black" points="1346.13,-65.34 1345.87,-75.34 1343.87,-75.29 1344.14,-65.29 1346.13,-65.34"/>
<polyline fill="none" stroke="black" points="1347,-70.37 1342,-70.23 "/>
<polygon fill="black" stroke="black" points="1341.14,-65.21 1340.87,-75.21 1338.87,-75.15 1339.14,-65.16 1341.14,-65.21"/>
<polyline fill="none" stroke="black" points="1342,-70.23 1337.01,-70.1 "/>
</g>
<!-- aind_behavior_iso_force.task_logic.ForceOperationControl&#45;&gt;aind_behavior_iso_force.task_logic.LoadCellInput -->
<g id="edge7" class="edge">
<title>aind_behavior_iso_force.task_logic.ForceOperationControl:e&#45;&gt;aind_behavior_iso_force.task_logic.LoadCellInput:w</title>
<path fill="none" stroke="black" d="M1254.16,-80.34C1289.13,-79.23 1303.64,-72.53 1336.62,-70.87"/>
<polyline fill="none" stroke="black" points="1244,-80.5 1249,-80.42 "/>
<polyline fill="none" stroke="black" points="1249,-80.42 1254,-80.35 "/>
<polyline fill="none" stroke="black" points="1352,-70.5 1347,-70.62 "/>
<polygon fill="black" stroke="black" points="1345.88,-65.65 1346.12,-75.64 1344.12,-75.69 1343.88,-65.69 1345.88,-65.65"/>
<polyline fill="none" stroke="black" points="1347,-70.62 1342,-70.74 "/>
<polygon fill="black" stroke="black" points="1340.88,-65.77 1341.12,-75.76 1339.12,-75.81 1338.88,-65.81 1340.88,-65.77"/>
<polyline fill="none" stroke="black" points="1342,-70.74 1337,-70.86 "/>
</g>
</g>
</svg>
