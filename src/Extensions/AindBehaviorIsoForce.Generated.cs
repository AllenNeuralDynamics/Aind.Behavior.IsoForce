//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindIsoForceDataSchema
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Defines the action types
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum Action
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        Left = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
        Right = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
        RightLeft = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
        Push = 4,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
        Pull = 8,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
        PushPull = 12,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AindBehaviorSessionModel
    {
    
        private string _aindBehaviorServicesPkgVersion;
    
        private string _version;
    
        private string _experiment;
    
        private System.Collections.Generic.List<string> _experimenter;
    
        private System.DateTimeOffset _date;
    
        private string _rootPath;
    
        private string _sessionName;
    
        private string _subject;
    
        private string _experimentVersion;
    
        private string _notes;
    
        private string _commitHash;
    
        private bool _allowDirtyRepo;
    
        private bool _skipHardwareValidation;
    
        public AindBehaviorSessionModel()
        {
            _aindBehaviorServicesPkgVersion = "0.12.0";
            _version = "0.3.1";
            _experimenter = new System.Collections.Generic.List<string>();
            _allowDirtyRepo = false;
            _skipHardwareValidation = false;
        }
    
        protected AindBehaviorSessionModel(AindBehaviorSessionModel other)
        {
            _aindBehaviorServicesPkgVersion = other._aindBehaviorServicesPkgVersion;
            _version = other._version;
            _experiment = other._experiment;
            _experimenter = other._experimenter;
            _date = other._date;
            _rootPath = other._rootPath;
            _sessionName = other._sessionName;
            _subject = other._subject;
            _experimentVersion = other._experimentVersion;
            _notes = other._notes;
            _commitHash = other._commitHash;
            _allowDirtyRepo = other._allowDirtyRepo;
            _skipHardwareValidation = other._skipHardwareValidation;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("aind_behavior_services_pkg_version")]
        public string AindBehaviorServicesPkgVersion
        {
            get
            {
                return _aindBehaviorServicesPkgVersion;
            }
            set
            {
                _aindBehaviorServicesPkgVersion = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    
        /// <summary>
        /// Name of the experiment
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("experiment", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Name of the experiment")]
        public string Experiment
        {
            get
            {
                return _experiment;
            }
            set
            {
                _experiment = value;
            }
        }
    
        /// <summary>
        /// Name of the experimenter
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("experimenter")]
        [System.ComponentModel.DescriptionAttribute("Name of the experimenter")]
        public System.Collections.Generic.List<string> Experimenter
        {
            get
            {
                return _experimenter;
            }
            set
            {
                _experimenter = value;
            }
        }
    
        /// <summary>
        /// Date of the experiment
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("date")]
        [System.ComponentModel.DescriptionAttribute("Date of the experiment")]
        public System.DateTimeOffset Date
        {
            get
            {
                return _date;
            }
            set
            {
                _date = value;
            }
        }
    
        /// <summary>
        /// Root path where data will be logged
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("root_path", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Root path where data will be logged")]
        public string RootPath
        {
            get
            {
                return _rootPath;
            }
            set
            {
                _rootPath = value;
            }
        }
    
        /// <summary>
        /// Name of the session. This will be used to create a folder in the root path.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("session_name")]
        [System.ComponentModel.DescriptionAttribute("Name of the session. This will be used to create a folder in the root path.")]
        public string SessionName
        {
            get
            {
                return _sessionName;
            }
            set
            {
                _sessionName = value;
            }
        }
    
        /// <summary>
        /// Name of the subject
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("subject", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Name of the subject")]
        public string Subject
        {
            get
            {
                return _subject;
            }
            set
            {
                _subject = value;
            }
        }
    
        /// <summary>
        /// Version of the experiment
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("experiment_version", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Version of the experiment")]
        public string ExperimentVersion
        {
            get
            {
                return _experimentVersion;
            }
            set
            {
                _experimentVersion = value;
            }
        }
    
        /// <summary>
        /// Notes about the experiment
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [System.ComponentModel.DescriptionAttribute("Notes about the experiment")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        /// <summary>
        /// Commit hash of the repository
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("commit_hash")]
        [System.ComponentModel.DescriptionAttribute("Commit hash of the repository")]
        public string CommitHash
        {
            get
            {
                return _commitHash;
            }
            set
            {
                _commitHash = value;
            }
        }
    
        /// <summary>
        /// Allow running from a dirty repository
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("allow_dirty_repo")]
        [System.ComponentModel.DescriptionAttribute("Allow running from a dirty repository")]
        public bool AllowDirtyRepo
        {
            get
            {
                return _allowDirtyRepo;
            }
            set
            {
                _allowDirtyRepo = value;
            }
        }
    
        /// <summary>
        /// Skip hardware validation
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("skip_hardware_validation")]
        [System.ComponentModel.DescriptionAttribute("Skip hardware validation")]
        public bool SkipHardwareValidation
        {
            get
            {
                return _skipHardwareValidation;
            }
            set
            {
                _skipHardwareValidation = value;
            }
        }
    
        public System.IObservable<AindBehaviorSessionModel> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindBehaviorSessionModel(this)));
        }
    
        public System.IObservable<AindBehaviorSessionModel> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindBehaviorSessionModel(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("AindBehaviorServicesPkgVersion = " + _aindBehaviorServicesPkgVersion + ", ");
            stringBuilder.Append("Version = " + _version + ", ");
            stringBuilder.Append("Experiment = " + _experiment + ", ");
            stringBuilder.Append("Experimenter = " + _experimenter + ", ");
            stringBuilder.Append("Date = " + _date + ", ");
            stringBuilder.Append("RootPath = " + _rootPath + ", ");
            stringBuilder.Append("SessionName = " + _sessionName + ", ");
            stringBuilder.Append("Subject = " + _subject + ", ");
            stringBuilder.Append("ExperimentVersion = " + _experimentVersion + ", ");
            stringBuilder.Append("Notes = " + _notes + ", ");
            stringBuilder.Append("CommitHash = " + _commitHash + ", ");
            stringBuilder.Append("AllowDirtyRepo = " + _allowDirtyRepo + ", ");
            stringBuilder.Append("SkipHardwareValidation = " + _skipHardwareValidation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AindIsoForceRig
    {
    
        private string _aindBehaviorServicesPkgVersion;
    
        private string _version;
    
        private string _computerName;
    
        private string _rigName;
    
        private CameraControllerSpinnakerCamera _triggeredCameraController;
    
        private HarpBehavior _harpBehavior;
    
        private HarpLicketySplit _harpLickometer;
    
        private LoadCells _harpLoadCells;
    
        private HarpWhiteRabbit _harpClockGenerator;
    
        private HarpEnvironmentSensor _harpEnvironmentSensor;
    
        private AindManipulatorDevice _manipulator;
    
        private RigCalibration _calibration;
    
        public AindIsoForceRig()
        {
            _aindBehaviorServicesPkgVersion = "0.12.0";
            _version = "0.1.0";
            _triggeredCameraController = new CameraControllerSpinnakerCamera();
            _harpBehavior = new HarpBehavior();
            _harpLickometer = new HarpLicketySplit();
            _harpLoadCells = new LoadCells();
            _harpClockGenerator = new HarpWhiteRabbit();
            _manipulator = new AindManipulatorDevice();
            _calibration = new RigCalibration();
        }
    
        protected AindIsoForceRig(AindIsoForceRig other)
        {
            _aindBehaviorServicesPkgVersion = other._aindBehaviorServicesPkgVersion;
            _version = other._version;
            _computerName = other._computerName;
            _rigName = other._rigName;
            _triggeredCameraController = other._triggeredCameraController;
            _harpBehavior = other._harpBehavior;
            _harpLickometer = other._harpLickometer;
            _harpLoadCells = other._harpLoadCells;
            _harpClockGenerator = other._harpClockGenerator;
            _harpEnvironmentSensor = other._harpEnvironmentSensor;
            _manipulator = other._manipulator;
            _calibration = other._calibration;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("aind_behavior_services_pkg_version")]
        public string AindBehaviorServicesPkgVersion
        {
            get
            {
                return _aindBehaviorServicesPkgVersion;
            }
            set
            {
                _aindBehaviorServicesPkgVersion = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    
        /// <summary>
        /// Computer name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("computer_name")]
        [System.ComponentModel.DescriptionAttribute("Computer name")]
        public string ComputerName
        {
            get
            {
                return _computerName;
            }
            set
            {
                _computerName = value;
            }
        }
    
        /// <summary>
        /// Rig name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rig_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Rig name")]
        public string RigName
        {
            get
            {
                return _rigName;
            }
            set
            {
                _rigName = value;
            }
        }
    
        /// <summary>
        /// Required camera controller to triggered cameras.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("triggered_camera_controller", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Required camera controller to triggered cameras.")]
        public CameraControllerSpinnakerCamera TriggeredCameraController
        {
            get
            {
                return _triggeredCameraController;
            }
            set
            {
                _triggeredCameraController = value;
            }
        }
    
        /// <summary>
        /// Harp behavior
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_behavior", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Harp behavior")]
        public HarpBehavior HarpBehavior
        {
            get
            {
                return _harpBehavior;
            }
            set
            {
                _harpBehavior = value;
            }
        }
    
        /// <summary>
        /// Harp lickometer
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_lickometer", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Harp lickometer")]
        public HarpLicketySplit HarpLickometer
        {
            get
            {
                return _harpLickometer;
            }
            set
            {
                _harpLickometer = value;
            }
        }
    
        /// <summary>
        /// Harp load cells
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_load_cells", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Harp load cells")]
        public LoadCells HarpLoadCells
        {
            get
            {
                return _harpLoadCells;
            }
            set
            {
                _harpLoadCells = value;
            }
        }
    
        /// <summary>
        /// Harp clock generator
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_clock_generator", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Harp clock generator")]
        public HarpWhiteRabbit HarpClockGenerator
        {
            get
            {
                return _harpClockGenerator;
            }
            set
            {
                _harpClockGenerator = value;
            }
        }
    
        /// <summary>
        /// Harp Environment sensor
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_environment_sensor")]
        [System.ComponentModel.DescriptionAttribute("Harp Environment sensor")]
        public HarpEnvironmentSensor HarpEnvironmentSensor
        {
            get
            {
                return _harpEnvironmentSensor;
            }
            set
            {
                _harpEnvironmentSensor = value;
            }
        }
    
        /// <summary>
        /// Manipulator
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("manipulator", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Manipulator")]
        public AindManipulatorDevice Manipulator
        {
            get
            {
                return _manipulator;
            }
            set
            {
                _manipulator = value;
            }
        }
    
        /// <summary>
        /// Load cells calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Load cells calibration")]
        public RigCalibration Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        public System.IObservable<AindIsoForceRig> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindIsoForceRig(this)));
        }
    
        public System.IObservable<AindIsoForceRig> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindIsoForceRig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("AindBehaviorServicesPkgVersion = " + _aindBehaviorServicesPkgVersion + ", ");
            stringBuilder.Append("Version = " + _version + ", ");
            stringBuilder.Append("ComputerName = " + _computerName + ", ");
            stringBuilder.Append("RigName = " + _rigName + ", ");
            stringBuilder.Append("TriggeredCameraController = " + _triggeredCameraController + ", ");
            stringBuilder.Append("HarpBehavior = " + _harpBehavior + ", ");
            stringBuilder.Append("HarpLickometer = " + _harpLickometer + ", ");
            stringBuilder.Append("HarpLoadCells = " + _harpLoadCells + ", ");
            stringBuilder.Append("HarpClockGenerator = " + _harpClockGenerator + ", ");
            stringBuilder.Append("HarpEnvironmentSensor = " + _harpEnvironmentSensor + ", ");
            stringBuilder.Append("Manipulator = " + _manipulator + ", ");
            stringBuilder.Append("Calibration = " + _calibration);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AindIsoForceTaskLogic
    {
    
        private string _name;
    
        private string _description;
    
        private AindIsoForceTaskParameters _taskParameters;
    
        private string _version;
    
        private string _stageName;
    
        public AindIsoForceTaskLogic()
        {
            _name = "AindIsoForce";
            _description = "";
            _taskParameters = new AindIsoForceTaskParameters();
            _version = "0.1.0";
        }
    
        protected AindIsoForceTaskLogic(AindIsoForceTaskLogic other)
        {
            _name = other._name;
            _description = other._description;
            _taskParameters = other._taskParameters;
            _version = other._version;
            _stageName = other._stageName;
        }
    
        /// <summary>
        /// Name of the task logic
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [System.ComponentModel.DescriptionAttribute("Name of the task logic")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        /// <summary>
        /// Description of the task.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        [System.ComponentModel.DescriptionAttribute("Description of the task.")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        /// <summary>
        /// Parameters of the task logic
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("task_parameters", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Parameters of the task logic")]
        public AindIsoForceTaskParameters TaskParameters
        {
            get
            {
                return _taskParameters;
            }
            set
            {
                _taskParameters = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    
        /// <summary>
        /// Optional stage name the `Task` object instance represents.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("stage_name")]
        [System.ComponentModel.DescriptionAttribute("Optional stage name the `Task` object instance represents.")]
        public string StageName
        {
            get
            {
                return _stageName;
            }
            set
            {
                _stageName = value;
            }
        }
    
        public System.IObservable<AindIsoForceTaskLogic> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindIsoForceTaskLogic(this)));
        }
    
        public System.IObservable<AindIsoForceTaskLogic> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindIsoForceTaskLogic(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Name = " + _name + ", ");
            stringBuilder.Append("Description = " + _description + ", ");
            stringBuilder.Append("TaskParameters = " + _taskParameters + ", ");
            stringBuilder.Append("Version = " + _version + ", ");
            stringBuilder.Append("StageName = " + _stageName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AindIsoForceTaskParameters
    {
    
        private double? _rngSeed;
    
        private string _aindBehaviorServicesPkgVersion;
    
        private Environment _environment;
    
        private OperationControl _operationControl;
    
        public AindIsoForceTaskParameters()
        {
            _aindBehaviorServicesPkgVersion = "0.12.0";
            _environment = new Environment();
            _operationControl = new OperationControl();
        }
    
        protected AindIsoForceTaskParameters(AindIsoForceTaskParameters other)
        {
            _rngSeed = other._rngSeed;
            _aindBehaviorServicesPkgVersion = other._aindBehaviorServicesPkgVersion;
            _environment = other._environment;
            _operationControl = other._operationControl;
        }
    
        /// <summary>
        /// Seed of the random number generator
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rng_seed")]
        [System.ComponentModel.DescriptionAttribute("Seed of the random number generator")]
        public double? RngSeed
        {
            get
            {
                return _rngSeed;
            }
            set
            {
                _rngSeed = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("aind_behavior_services_pkg_version")]
        public string AindBehaviorServicesPkgVersion
        {
            get
            {
                return _aindBehaviorServicesPkgVersion;
            }
            set
            {
                _aindBehaviorServicesPkgVersion = value;
            }
        }
    
        /// <summary>
        /// Environment settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("environment", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Environment settings")]
        public Environment Environment
        {
            get
            {
                return _environment;
            }
            set
            {
                _environment = value;
            }
        }
    
        /// <summary>
        /// Operation control
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("operation_control")]
        [System.ComponentModel.DescriptionAttribute("Operation control")]
        public OperationControl OperationControl
        {
            get
            {
                return _operationControl;
            }
            set
            {
                _operationControl = value;
            }
        }
    
        public System.IObservable<AindIsoForceTaskParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindIsoForceTaskParameters(this)));
        }
    
        public System.IObservable<AindIsoForceTaskParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindIsoForceTaskParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("RngSeed = " + _rngSeed + ", ");
            stringBuilder.Append("AindBehaviorServicesPkgVersion = " + _aindBehaviorServicesPkgVersion + ", ");
            stringBuilder.Append("Environment = " + _environment + ", ");
            stringBuilder.Append("OperationControl = " + _operationControl);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Additional settings for the manipulator device
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Additional settings for the manipulator device")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AindManipulatorAdditionalSettings
    {
    
        private Axis _spoutAxis;
    
        public AindManipulatorAdditionalSettings()
        {
            _spoutAxis = AindIsoForceDataSchema.Axis.Y1;
        }
    
        protected AindManipulatorAdditionalSettings(AindManipulatorAdditionalSettings other)
        {
            _spoutAxis = other._spoutAxis;
        }
    
        /// <summary>
        /// Spout axis
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("spout_axis")]
        [System.ComponentModel.DescriptionAttribute("Spout axis")]
        public Axis SpoutAxis
        {
            get
            {
                return _spoutAxis;
            }
            set
            {
                _spoutAxis = value;
            }
        }
    
        public System.IObservable<AindManipulatorAdditionalSettings> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindManipulatorAdditionalSettings(this)));
        }
    
        public System.IObservable<AindManipulatorAdditionalSettings> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindManipulatorAdditionalSettings(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("SpoutAxis = " + _spoutAxis);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Aind manipulator calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Aind manipulator calibration class")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AindManipulatorCalibration
    {
    
        private string _deviceName;
    
        private AindManipulatorCalibrationInput _input;
    
        private AindManipulatorCalibrationOutput _output;
    
        private System.DateTimeOffset? _date;
    
        private string _description;
    
        private string _notes;
    
        public AindManipulatorCalibration()
        {
            _deviceName = "AindManipulator";
            _input = new AindManipulatorCalibrationInput();
            _output = new AindManipulatorCalibrationOutput();
            _description = "Calibration of the load cells system";
        }
    
        protected AindManipulatorCalibration(AindManipulatorCalibration other)
        {
            _deviceName = other._deviceName;
            _input = other._input;
            _output = other._output;
            _date = other._date;
            _description = other._description;
            _notes = other._notes;
        }
    
        /// <summary>
        /// Must match a device name in rig/instrument
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Must match a device name in rig/instrument")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("input", Required=Newtonsoft.Json.Required.Always)]
        public AindManipulatorCalibrationInput Input
        {
            get
            {
                return _input;
            }
            set
            {
                _input = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output", Required=Newtonsoft.Json.Required.Always)]
        public AindManipulatorCalibrationOutput Output
        {
            get
            {
                return _output;
            }
            set
            {
                _output = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("date")]
        public System.DateTimeOffset? Date
        {
            get
            {
                return _date;
            }
            set
            {
                _date = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<AindManipulatorCalibration> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindManipulatorCalibration(this)));
        }
    
        public System.IObservable<AindManipulatorCalibration> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindManipulatorCalibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("Input = " + _input + ", ");
            stringBuilder.Append("Output = " + _output + ", ");
            stringBuilder.Append("Date = " + _date + ", ");
            stringBuilder.Append("Description = " + _description + ", ");
            stringBuilder.Append("Notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AindManipulatorCalibrationInput
    {
    
        private ManipulatorPosition _fullStepToMm;
    
        private System.Collections.Generic.List<AxisConfiguration> _axisConfiguration;
    
        private System.Collections.Generic.List<Axis> _homingOrder;
    
        private ManipulatorPosition _initialPosition;
    
        public AindManipulatorCalibrationInput()
        {
            _fullStepToMm = new ManipulatorPosition();
            _axisConfiguration = new System.Collections.Generic.List<AxisConfiguration>();
            _homingOrder = new System.Collections.Generic.List<Axis>();
            _initialPosition = new ManipulatorPosition();
        }
    
        protected AindManipulatorCalibrationInput(AindManipulatorCalibrationInput other)
        {
            _fullStepToMm = other._fullStepToMm;
            _axisConfiguration = other._axisConfiguration;
            _homingOrder = other._homingOrder;
            _initialPosition = other._initialPosition;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("full_step_to_mm")]
        public ManipulatorPosition FullStepToMm
        {
            get
            {
                return _fullStepToMm;
            }
            set
            {
                _fullStepToMm = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("axis_configuration")]
        public System.Collections.Generic.List<AxisConfiguration> AxisConfiguration
        {
            get
            {
                return _axisConfiguration;
            }
            set
            {
                _axisConfiguration = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("homing_order")]
        public System.Collections.Generic.List<Axis> HomingOrder
        {
            get
            {
                return _homingOrder;
            }
            set
            {
                _homingOrder = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("initial_position")]
        public ManipulatorPosition InitialPosition
        {
            get
            {
                return _initialPosition;
            }
            set
            {
                _initialPosition = value;
            }
        }
    
        public System.IObservable<AindManipulatorCalibrationInput> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindManipulatorCalibrationInput(this)));
        }
    
        public System.IObservable<AindManipulatorCalibrationInput> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindManipulatorCalibrationInput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("FullStepToMm = " + _fullStepToMm + ", ");
            stringBuilder.Append("AxisConfiguration = " + _axisConfiguration + ", ");
            stringBuilder.Append("HomingOrder = " + _homingOrder + ", ");
            stringBuilder.Append("InitialPosition = " + _initialPosition);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AindManipulatorCalibrationOutput
    {
    
        public AindManipulatorCalibrationOutput()
        {
        }
    
        protected AindManipulatorCalibrationOutput(AindManipulatorCalibrationOutput other)
        {
        }
    
        public System.IObservable<AindManipulatorCalibrationOutput> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindManipulatorCalibrationOutput(this)));
        }
    
        public System.IObservable<AindManipulatorCalibrationOutput> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindManipulatorCalibrationOutput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Overrides the default settings for the manipulator device by spec'ing additional_settings field
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Overrides the default settings for the manipulator device by spec\'ing additional_" +
        "settings field")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AindManipulatorDevice
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private AindManipulatorAdditionalSettings _additionalSettings;
    
        private AindManipulatorCalibration _calibration;
    
        private int _whoAmI;
    
        private string _serialNumber;
    
        private string _portName;
    
        public AindManipulatorDevice()
        {
            _deviceType = "StepperDriver";
            _additionalSettings = new AindManipulatorAdditionalSettings();
            _whoAmI = 1130;
        }
    
        protected AindManipulatorDevice(AindManipulatorDevice other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public AindManipulatorAdditionalSettings AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        public AindManipulatorCalibration Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<AindManipulatorDevice> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindManipulatorDevice(this)));
        }
    
        public System.IObservable<AindManipulatorDevice> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindManipulatorDevice(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("WhoAmI = " + _whoAmI + ", ");
            stringBuilder.Append("SerialNumber = " + _serialNumber + ", ");
            stringBuilder.Append("PortName = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Motor axis available
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum Axis
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        X = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
        Y1 = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
        Y2 = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
        Z = 4,
    }


    /// <summary>
    /// Axis configuration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Axis configuration")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AxisConfiguration
    {
    
        private Axis _axis;
    
        private int _stepAccelerationInterval;
    
        private int _stepInterval;
    
        private MicrostepResolution _microstepResolution;
    
        private int _maximumStepInterval;
    
        private MotorOperationMode _motorOperationMode;
    
        private double _maxLimit;
    
        private double _minLimit;
    
        public AxisConfiguration()
        {
            _stepAccelerationInterval = 100;
            _stepInterval = 100;
            _microstepResolution = AindIsoForceDataSchema.MicrostepResolution.Microstep8;
            _maximumStepInterval = 2000;
            _motorOperationMode = AindIsoForceDataSchema.MotorOperationMode.Quiet;
            _maxLimit = 25D;
            _minLimit = -0.01D;
        }
    
        protected AxisConfiguration(AxisConfiguration other)
        {
            _axis = other._axis;
            _stepAccelerationInterval = other._stepAccelerationInterval;
            _stepInterval = other._stepInterval;
            _microstepResolution = other._microstepResolution;
            _maximumStepInterval = other._maximumStepInterval;
            _motorOperationMode = other._motorOperationMode;
            _maxLimit = other._maxLimit;
            _minLimit = other._minLimit;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("axis", Required=Newtonsoft.Json.Required.Always)]
        public Axis Axis
        {
            get
            {
                return _axis;
            }
            set
            {
                _axis = value;
            }
        }
    
        /// <summary>
        /// Acceleration of the step interval in microseconds
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("step_acceleration_interval")]
        [System.ComponentModel.DescriptionAttribute("Acceleration of the step interval in microseconds")]
        public int StepAccelerationInterval
        {
            get
            {
                return _stepAccelerationInterval;
            }
            set
            {
                _stepAccelerationInterval = value;
            }
        }
    
        /// <summary>
        /// Step interval in microseconds.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("step_interval")]
        [System.ComponentModel.DescriptionAttribute("Step interval in microseconds.")]
        public int StepInterval
        {
            get
            {
                return _stepInterval;
            }
            set
            {
                _stepInterval = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("microstep_resolution")]
        public MicrostepResolution MicrostepResolution
        {
            get
            {
                return _microstepResolution;
            }
            set
            {
                _microstepResolution = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("maximum_step_interval")]
        public int MaximumStepInterval
        {
            get
            {
                return _maximumStepInterval;
            }
            set
            {
                _maximumStepInterval = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("motor_operation_mode")]
        public MotorOperationMode MotorOperationMode
        {
            get
            {
                return _motorOperationMode;
            }
            set
            {
                _motorOperationMode = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("max_limit")]
        public double MaxLimit
        {
            get
            {
                return _maxLimit;
            }
            set
            {
                _maxLimit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("min_limit")]
        public double MinLimit
        {
            get
            {
                return _minLimit;
            }
            set
            {
                _minLimit = value;
            }
        }
    
        public System.IObservable<AxisConfiguration> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AxisConfiguration(this)));
        }
    
        public System.IObservable<AxisConfiguration> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AxisConfiguration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Axis = " + _axis + ", ");
            stringBuilder.Append("StepAccelerationInterval = " + _stepAccelerationInterval + ", ");
            stringBuilder.Append("StepInterval = " + _stepInterval + ", ");
            stringBuilder.Append("MicrostepResolution = " + _microstepResolution + ", ");
            stringBuilder.Append("MaximumStepInterval = " + _maximumStepInterval + ", ");
            stringBuilder.Append("MotorOperationMode = " + _motorOperationMode + ", ");
            stringBuilder.Append("MaxLimit = " + _maxLimit + ", ");
            stringBuilder.Append("MinLimit = " + _minLimit);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class BaseModel
    {
    
        public BaseModel()
        {
        }
    
        protected BaseModel(BaseModel other)
        {
        }
    
        public System.IObservable<BaseModel> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BaseModel(this)));
        }
    
        public System.IObservable<BaseModel> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BaseModel(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class BetaDistribution : Distribution
    {
    
        private BetaDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public BetaDistribution()
        {
            _distributionParameters = new BetaDistributionParameters();
        }
    
        protected BetaDistribution(BetaDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public BetaDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<BetaDistribution> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BetaDistribution(this)));
        }
    
        public System.IObservable<BetaDistribution> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BetaDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("DistributionParameters = " + _distributionParameters + ", ");
            stringBuilder.Append("TruncationParameters = " + _truncationParameters + ", ");
            stringBuilder.Append("ScalingParameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class BetaDistributionParameters
    {
    
        private string _family;
    
        private double _alpha;
    
        private double _beta;
    
        public BetaDistributionParameters()
        {
            _family = "Beta";
            _alpha = 5D;
            _beta = 5D;
        }
    
        protected BetaDistributionParameters(BetaDistributionParameters other)
        {
            _family = other._family;
            _alpha = other._alpha;
            _beta = other._beta;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Alpha parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("alpha")]
        [System.ComponentModel.DescriptionAttribute("Alpha parameter of the distribution")]
        public double Alpha
        {
            get
            {
                return _alpha;
            }
            set
            {
                _alpha = value;
            }
        }
    
        /// <summary>
        /// Beta parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("beta")]
        [System.ComponentModel.DescriptionAttribute("Beta parameter of the distribution")]
        public double Beta
        {
            get
            {
                return _beta;
            }
            set
            {
                _beta = value;
            }
        }
    
        public System.IObservable<BetaDistributionParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BetaDistributionParameters(this)));
        }
    
        public System.IObservable<BetaDistributionParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BetaDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Family = " + _family + ", ");
            stringBuilder.Append("Alpha = " + _alpha + ", ");
            stringBuilder.Append("Beta = " + _beta);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class BinomialDistribution : Distribution
    {
    
        private BinomialDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public BinomialDistribution()
        {
            _distributionParameters = new BinomialDistributionParameters();
        }
    
        protected BinomialDistribution(BinomialDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public BinomialDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<BinomialDistribution> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BinomialDistribution(this)));
        }
    
        public System.IObservable<BinomialDistribution> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BinomialDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("DistributionParameters = " + _distributionParameters + ", ");
            stringBuilder.Append("TruncationParameters = " + _truncationParameters + ", ");
            stringBuilder.Append("ScalingParameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class BinomialDistributionParameters
    {
    
        private string _family;
    
        private int _n;
    
        private double _p;
    
        public BinomialDistributionParameters()
        {
            _family = "Binomial";
            _n = 1;
            _p = 0.5D;
        }
    
        protected BinomialDistributionParameters(BinomialDistributionParameters other)
        {
            _family = other._family;
            _n = other._n;
            _p = other._p;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Number of trials
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("n")]
        [System.ComponentModel.DescriptionAttribute("Number of trials")]
        public int N
        {
            get
            {
                return _n;
            }
            set
            {
                _n = value;
            }
        }
    
        /// <summary>
        /// Probability of success
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("p")]
        [System.ComponentModel.DescriptionAttribute("Probability of success")]
        public double P
        {
            get
            {
                return _p;
            }
            set
            {
                _p = value;
            }
        }
    
        public System.IObservable<BinomialDistributionParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BinomialDistributionParameters(this)));
        }
    
        public System.IObservable<BinomialDistributionParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BinomialDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Family = " + _family + ", ");
            stringBuilder.Append("N = " + _n + ", ");
            stringBuilder.Append("P = " + _p);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Block : BlockStatistics
    {
    
        private System.Collections.Generic.List<Trial> _trials;
    
        private bool _shuffle;
    
        private int? _repeatCount;
    
        public Block()
        {
            _trials = new System.Collections.Generic.List<Trial>();
            _shuffle = false;
        }
    
        protected Block(Block other) : 
                base(other)
        {
            _trials = other._trials;
            _shuffle = other._shuffle;
            _repeatCount = other._repeatCount;
        }
    
        /// <summary>
        /// List of trials in the block
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("trials")]
        [System.ComponentModel.DescriptionAttribute("List of trials in the block")]
        public System.Collections.Generic.List<Trial> Trials
        {
            get
            {
                return _trials;
            }
            set
            {
                _trials = value;
            }
        }
    
        /// <summary>
        /// Whether to shuffle the trials in the block
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("shuffle")]
        [System.ComponentModel.DescriptionAttribute("Whether to shuffle the trials in the block")]
        public bool Shuffle
        {
            get
            {
                return _shuffle;
            }
            set
            {
                _shuffle = value;
            }
        }
    
        /// <summary>
        /// Number of times to repeat the block. If null, the block will be repeated indefinitely
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("repeat_count")]
        [System.ComponentModel.DescriptionAttribute("Number of times to repeat the block. If null, the block will be repeated indefini" +
            "tely")]
        public int? RepeatCount
        {
            get
            {
                return _repeatCount;
            }
            set
            {
                _repeatCount = value;
            }
        }
    
        public System.IObservable<Block> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Block(this)));
        }
    
        public System.IObservable<Block> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Block(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("Trials = " + _trials + ", ");
            stringBuilder.Append("Shuffle = " + _shuffle + ", ");
            stringBuilder.Append("RepeatCount = " + _repeatCount);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class BlockGenerator : BlockStatistics
    {
    
        private Distribution _blockSize;
    
        private Trial _trialTemplate;
    
        public BlockGenerator()
        {
            _blockSize = new Distribution();
            _trialTemplate = new Trial();
        }
    
        protected BlockGenerator(BlockGenerator other) : 
                base(other)
        {
            _blockSize = other._blockSize;
            _trialTemplate = other._trialTemplate;
        }
    
        /// <summary>
        /// Size of the block
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("block_size")]
        [System.ComponentModel.DescriptionAttribute("Size of the block")]
        public Distribution BlockSize
        {
            get
            {
                return _blockSize;
            }
            set
            {
                _blockSize = value;
            }
        }
    
        /// <summary>
        /// Statistics of the trials in the block
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("trial_template", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Statistics of the trials in the block")]
        public Trial TrialTemplate
        {
            get
            {
                return _trialTemplate;
            }
            set
            {
                _trialTemplate = value;
            }
        }
    
        public System.IObservable<BlockGenerator> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BlockGenerator(this)));
        }
    
        public System.IObservable<BlockGenerator> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BlockGenerator(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("BlockSize = " + _blockSize + ", ");
            stringBuilder.Append("TrialTemplate = " + _trialTemplate);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "mode")]
    [JsonInheritanceAttribute("Block", typeof(Block))]
    [JsonInheritanceAttribute("BlockGenerator", typeof(BlockGenerator))]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class BlockStatistics
    {
    
        public BlockStatistics()
        {
        }
    
        protected BlockStatistics(BlockStatistics other)
        {
        }
    
        public System.IObservable<BlockStatistics> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BlockStatistics(this)));
        }
    
        public System.IObservable<BlockStatistics> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BlockStatistics(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class CameraControllerSpinnakerCamera
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private System.Collections.Generic.Dictionary<string, SpinnakerCamera> _cameras;
    
        private int? _frameRate;
    
        public CameraControllerSpinnakerCamera()
        {
            _deviceType = "CameraController";
            _cameras = new System.Collections.Generic.Dictionary<string, SpinnakerCamera>();
        }
    
        protected CameraControllerSpinnakerCamera(CameraControllerSpinnakerCamera other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _cameras = other._cameras;
            _frameRate = other._frameRate;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Cameras to be instantiated
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cameras", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Cameras to be instantiated")]
        public System.Collections.Generic.Dictionary<string, SpinnakerCamera> Cameras
        {
            get
            {
                return _cameras;
            }
            set
            {
                _cameras = value;
            }
        }
    
        /// <summary>
        /// Frame rate of the trigger to all cameras
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [System.ComponentModel.DescriptionAttribute("Frame rate of the trigger to all cameras")]
        public int? FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        public System.IObservable<CameraControllerSpinnakerCamera> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new CameraControllerSpinnakerCamera(this)));
        }
    
        public System.IObservable<CameraControllerSpinnakerCamera> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new CameraControllerSpinnakerCamera(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("Cameras = " + _cameras + ", ");
            stringBuilder.Append("FrameRate = " + _frameRate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ConnectedClockOutput
    {
    
        private string _targetDevice;
    
        private int _outputChannel;
    
        public ConnectedClockOutput()
        {
        }
    
        protected ConnectedClockOutput(ConnectedClockOutput other)
        {
            _targetDevice = other._targetDevice;
            _outputChannel = other._outputChannel;
        }
    
        /// <summary>
        /// Optional device name to provide user additional information
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("target_device")]
        [System.ComponentModel.DescriptionAttribute("Optional device name to provide user additional information")]
        public string TargetDevice
        {
            get
            {
                return _targetDevice;
            }
            set
            {
                _targetDevice = value;
            }
        }
    
        /// <summary>
        /// Output channel
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("output_channel", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Output channel")]
        public int OutputChannel
        {
            get
            {
                return _outputChannel;
            }
            set
            {
                _outputChannel = value;
            }
        }
    
        public System.IObservable<ConnectedClockOutput> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ConnectedClockOutput(this)));
        }
    
        public System.IObservable<ConnectedClockOutput> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ConnectedClockOutput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("TargetDevice = " + _targetDevice + ", ");
            stringBuilder.Append("OutputChannel = " + _outputChannel);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class CrossingOutcome
    {
    
        private Action _action;
    
        private double _duration;
    
        private TimestampedThresholdedJoystickForce _start;
    
        private TimestampedThresholdedJoystickForce _end;
    
        private bool _isValidDuration;
    
        private bool _isRewardAction;
    
        public CrossingOutcome()
        {
            _start = new TimestampedThresholdedJoystickForce();
            _end = new TimestampedThresholdedJoystickForce();
        }
    
        protected CrossingOutcome(CrossingOutcome other)
        {
            _action = other._action;
            _duration = other._duration;
            _start = other._start;
            _end = other._end;
            _isValidDuration = other._isValidDuration;
            _isRewardAction = other._isRewardAction;
        }
    
        /// <summary>
        /// Action that was taken
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("action", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Action that was taken")]
        public Action Action
        {
            get
            {
                return _action;
            }
            set
            {
                _action = value;
            }
        }
    
        /// <summary>
        /// Duration of the crossing
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("duration", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Duration of the crossing")]
        public double Duration
        {
            get
            {
                return _duration;
            }
            set
            {
                _duration = value;
            }
        }
    
        /// <summary>
        /// Start of the crossing
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("start", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Start of the crossing")]
        public TimestampedThresholdedJoystickForce Start
        {
            get
            {
                return _start;
            }
            set
            {
                _start = value;
            }
        }
    
        /// <summary>
        /// End of the crossing
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("end", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("End of the crossing")]
        public TimestampedThresholdedJoystickForce End
        {
            get
            {
                return _end;
            }
            set
            {
                _end = value;
            }
        }
    
        /// <summary>
        /// Whether the crossing duration is valid
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("is_valid_duration", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Whether the crossing duration is valid")]
        public bool IsValidDuration
        {
            get
            {
                return _isValidDuration;
            }
            set
            {
                _isValidDuration = value;
            }
        }
    
        /// <summary>
        /// Whether the crossing is a reward action
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("is_reward_action", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Whether the crossing is a reward action")]
        public bool IsRewardAction
        {
            get
            {
                return _isRewardAction;
            }
            set
            {
                _isRewardAction = value;
            }
        }
    
        public System.IObservable<CrossingOutcome> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new CrossingOutcome(this)));
        }
    
        public System.IObservable<CrossingOutcome> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new CrossingOutcome(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Action = " + _action + ", ");
            stringBuilder.Append("Duration = " + _duration + ", ");
            stringBuilder.Append("Start = " + _start + ", ");
            stringBuilder.Append("End = " + _end + ", ");
            stringBuilder.Append("IsValidDuration = " + _isValidDuration + ", ");
            stringBuilder.Append("IsRewardAction = " + _isRewardAction);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "family")]
    [JsonInheritanceAttribute("Scalar", typeof(Scalar))]
    [JsonInheritanceAttribute("Beta", typeof(BetaDistribution))]
    [JsonInheritanceAttribute("Binomial", typeof(BinomialDistribution))]
    [JsonInheritanceAttribute("Exponential", typeof(ExponentialDistribution))]
    [JsonInheritanceAttribute("Gamma", typeof(GammaDistribution))]
    [JsonInheritanceAttribute("LogNormal", typeof(LogNormalDistribution))]
    [JsonInheritanceAttribute("Normal", typeof(NormalDistribution))]
    [JsonInheritanceAttribute("Pdf", typeof(PdfDistribution))]
    [JsonInheritanceAttribute("Uniform", typeof(UniformDistribution))]
    [JsonInheritanceAttribute("Poisson", typeof(PoissonDistribution))]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Distribution
    {
    
        public Distribution()
        {
        }
    
        protected Distribution(Distribution other)
        {
        }
    
        public System.IObservable<Distribution> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Distribution(this)));
        }
    
        public System.IObservable<Distribution> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Distribution(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Environment
    {
    
        private System.Collections.Generic.List<BlockStatistics> _blockStatistics;
    
        private bool _shuffle;
    
        private int? _repeatCount;
    
        public Environment()
        {
            _blockStatistics = new System.Collections.Generic.List<BlockStatistics>();
            _shuffle = false;
        }
    
        protected Environment(Environment other)
        {
            _blockStatistics = other._blockStatistics;
            _shuffle = other._shuffle;
            _repeatCount = other._repeatCount;
        }
    
        /// <summary>
        /// Statistics of the environment
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("block_statistics", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Statistics of the environment")]
        public System.Collections.Generic.List<BlockStatistics> BlockStatistics
        {
            get
            {
                return _blockStatistics;
            }
            set
            {
                _blockStatistics = value;
            }
        }
    
        /// <summary>
        /// Whether to shuffle the blocks
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("shuffle")]
        [System.ComponentModel.DescriptionAttribute("Whether to shuffle the blocks")]
        public bool Shuffle
        {
            get
            {
                return _shuffle;
            }
            set
            {
                _shuffle = value;
            }
        }
    
        /// <summary>
        /// Number of times to repeat the environment. If null, the environment will be repeated indefinitely
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("repeat_count")]
        [System.ComponentModel.DescriptionAttribute("Number of times to repeat the environment. If null, the environment will be repea" +
            "ted indefinitely")]
        public int? RepeatCount
        {
            get
            {
                return _repeatCount;
            }
            set
            {
                _repeatCount = value;
            }
        }
    
        public System.IObservable<Environment> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Environment(this)));
        }
    
        public System.IObservable<Environment> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Environment(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("BlockStatistics = " + _blockStatistics + ", ");
            stringBuilder.Append("Shuffle = " + _shuffle + ", ");
            stringBuilder.Append("RepeatCount = " + _repeatCount);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ExponentialDistribution : Distribution
    {
    
        private ExponentialDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public ExponentialDistribution()
        {
            _distributionParameters = new ExponentialDistributionParameters();
        }
    
        protected ExponentialDistribution(ExponentialDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public ExponentialDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<ExponentialDistribution> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ExponentialDistribution(this)));
        }
    
        public System.IObservable<ExponentialDistribution> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ExponentialDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("DistributionParameters = " + _distributionParameters + ", ");
            stringBuilder.Append("TruncationParameters = " + _truncationParameters + ", ");
            stringBuilder.Append("ScalingParameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ExponentialDistributionParameters
    {
    
        private string _family;
    
        private double _rate;
    
        public ExponentialDistributionParameters()
        {
            _family = "Exponential";
            _rate = 0D;
        }
    
        protected ExponentialDistributionParameters(ExponentialDistributionParameters other)
        {
            _family = other._family;
            _rate = other._rate;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Rate parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rate")]
        [System.ComponentModel.DescriptionAttribute("Rate parameter of the distribution")]
        public double Rate
        {
            get
            {
                return _rate;
            }
            set
            {
                _rate = value;
            }
        }
    
        public System.IObservable<ExponentialDistributionParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ExponentialDistributionParameters(this)));
        }
    
        public System.IObservable<ExponentialDistributionParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ExponentialDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Family = " + _family + ", ");
            stringBuilder.Append("Rate = " + _rate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ForceOperationControl
    {
    
        private LoadCellInput _left;
    
        private LoadCellInput _right;
    
        private LoadCellInput _push;
    
        private LoadCellInput _pull;
    
        public ForceOperationControl()
        {
            _left = new LoadCellInput();
            _right = new LoadCellInput();
            _push = new LoadCellInput();
            _pull = new LoadCellInput();
        }
    
        protected ForceOperationControl(ForceOperationControl other)
        {
            _left = other._left;
            _right = other._right;
            _push = other._push;
            _pull = other._pull;
        }
    
        /// <summary>
        /// Left load cell input
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("left")]
        [System.ComponentModel.DescriptionAttribute("Left load cell input")]
        public LoadCellInput Left
        {
            get
            {
                return _left;
            }
            set
            {
                _left = value;
            }
        }
    
        /// <summary>
        /// Right load cell input
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("right")]
        [System.ComponentModel.DescriptionAttribute("Right load cell input")]
        public LoadCellInput Right
        {
            get
            {
                return _right;
            }
            set
            {
                _right = value;
            }
        }
    
        /// <summary>
        /// Push load cell input
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("push")]
        [System.ComponentModel.DescriptionAttribute("Push load cell input")]
        public LoadCellInput Push
        {
            get
            {
                return _push;
            }
            set
            {
                _push = value;
            }
        }
    
        /// <summary>
        /// Pull load cell input
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pull")]
        [System.ComponentModel.DescriptionAttribute("Pull load cell input")]
        public LoadCellInput Pull
        {
            get
            {
                return _pull;
            }
            set
            {
                _pull = value;
            }
        }
    
        public System.IObservable<ForceOperationControl> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ForceOperationControl(this)));
        }
    
        public System.IObservable<ForceOperationControl> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ForceOperationControl(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Left = " + _left + ", ");
            stringBuilder.Append("Right = " + _right + ", ");
            stringBuilder.Append("Push = " + _push + ", ");
            stringBuilder.Append("Pull = " + _pull);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ForceThreshold
    {
    
        private double? _left;
    
        private double? _right;
    
        private double? _push;
    
        private double? _pull;
    
        public ForceThreshold()
        {
        }
    
        protected ForceThreshold(ForceThreshold other)
        {
            _left = other._left;
            _right = other._right;
            _push = other._push;
            _pull = other._pull;
        }
    
        /// <summary>
        /// Left force threshold
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("left")]
        [System.ComponentModel.DescriptionAttribute("Left force threshold")]
        public double? Left
        {
            get
            {
                return _left;
            }
            set
            {
                _left = value;
            }
        }
    
        /// <summary>
        /// Right force threshold
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("right")]
        [System.ComponentModel.DescriptionAttribute("Right force threshold")]
        public double? Right
        {
            get
            {
                return _right;
            }
            set
            {
                _right = value;
            }
        }
    
        /// <summary>
        /// Push force threshold
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("push")]
        [System.ComponentModel.DescriptionAttribute("Push force threshold")]
        public double? Push
        {
            get
            {
                return _push;
            }
            set
            {
                _push = value;
            }
        }
    
        /// <summary>
        /// Pull force threshold
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pull")]
        [System.ComponentModel.DescriptionAttribute("Pull force threshold")]
        public double? Pull
        {
            get
            {
                return _pull;
            }
            set
            {
                _pull = value;
            }
        }
    
        public System.IObservable<ForceThreshold> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ForceThreshold(this)));
        }
    
        public System.IObservable<ForceThreshold> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ForceThreshold(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Left = " + _left + ", ");
            stringBuilder.Append("Right = " + _right + ", ");
            stringBuilder.Append("Push = " + _push + ", ");
            stringBuilder.Append("Pull = " + _pull);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class GammaDistribution : Distribution
    {
    
        private GammaDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public GammaDistribution()
        {
            _distributionParameters = new GammaDistributionParameters();
        }
    
        protected GammaDistribution(GammaDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public GammaDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<GammaDistribution> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new GammaDistribution(this)));
        }
    
        public System.IObservable<GammaDistribution> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new GammaDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("DistributionParameters = " + _distributionParameters + ", ");
            stringBuilder.Append("TruncationParameters = " + _truncationParameters + ", ");
            stringBuilder.Append("ScalingParameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class GammaDistributionParameters
    {
    
        private string _family;
    
        private double _shape;
    
        private double _rate;
    
        public GammaDistributionParameters()
        {
            _family = "Gamma";
            _shape = 1D;
            _rate = 1D;
        }
    
        protected GammaDistributionParameters(GammaDistributionParameters other)
        {
            _family = other._family;
            _shape = other._shape;
            _rate = other._rate;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Shape parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("shape")]
        [System.ComponentModel.DescriptionAttribute("Shape parameter of the distribution")]
        public double Shape
        {
            get
            {
                return _shape;
            }
            set
            {
                _shape = value;
            }
        }
    
        /// <summary>
        /// Rate parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rate")]
        [System.ComponentModel.DescriptionAttribute("Rate parameter of the distribution")]
        public double Rate
        {
            get
            {
                return _rate;
            }
            set
            {
                _rate = value;
            }
        }
    
        public System.IObservable<GammaDistributionParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new GammaDistributionParameters(this)));
        }
    
        public System.IObservable<GammaDistributionParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new GammaDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Family = " + _family + ", ");
            stringBuilder.Append("Shape = " + _shape + ", ");
            stringBuilder.Append("Rate = " + _rate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class HarpBehavior
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpBehavior()
        {
            _deviceType = "Behavior";
            _whoAmI = 1216;
        }
    
        protected HarpBehavior(HarpBehavior other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpBehavior> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpBehavior(this)));
        }
    
        public System.IObservable<HarpBehavior> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpBehavior(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("WhoAmI = " + _whoAmI + ", ");
            stringBuilder.Append("SerialNumber = " + _serialNumber + ", ");
            stringBuilder.Append("PortName = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class HarpEnvironmentSensor
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpEnvironmentSensor()
        {
            _deviceType = "EnvironmentSensor";
            _whoAmI = 1405;
        }
    
        protected HarpEnvironmentSensor(HarpEnvironmentSensor other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpEnvironmentSensor> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpEnvironmentSensor(this)));
        }
    
        public System.IObservable<HarpEnvironmentSensor> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpEnvironmentSensor(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("WhoAmI = " + _whoAmI + ", ");
            stringBuilder.Append("SerialNumber = " + _serialNumber + ", ");
            stringBuilder.Append("PortName = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class HarpLicketySplit
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpLicketySplit()
        {
            _deviceType = "LicketySplit";
            _whoAmI = 1400;
        }
    
        protected HarpLicketySplit(HarpLicketySplit other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpLicketySplit> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpLicketySplit(this)));
        }
    
        public System.IObservable<HarpLicketySplit> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpLicketySplit(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("WhoAmI = " + _whoAmI + ", ");
            stringBuilder.Append("SerialNumber = " + _serialNumber + ", ");
            stringBuilder.Append("PortName = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class HarpWhiteRabbit
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI;
    
        private string _serialNumber;
    
        private string _portName;
    
        private System.Collections.Generic.List<ConnectedClockOutput> _connectedClockOutputs;
    
        public HarpWhiteRabbit()
        {
            _deviceType = "WhiteRabbit";
            _whoAmI = 1404;
            _connectedClockOutputs = new System.Collections.Generic.List<ConnectedClockOutput>();
        }
    
        protected HarpWhiteRabbit(HarpWhiteRabbit other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
            _connectedClockOutputs = other._connectedClockOutputs;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        /// <summary>
        /// Connected clock outputs
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("connected_clock_outputs")]
        [System.ComponentModel.DescriptionAttribute("Connected clock outputs")]
        public System.Collections.Generic.List<ConnectedClockOutput> ConnectedClockOutputs
        {
            get
            {
                return _connectedClockOutputs;
            }
            set
            {
                _connectedClockOutputs = value;
            }
        }
    
        public System.IObservable<HarpWhiteRabbit> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpWhiteRabbit(this)));
        }
    
        public System.IObservable<HarpWhiteRabbit> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpWhiteRabbit(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("WhoAmI = " + _whoAmI + ", ");
            stringBuilder.Append("SerialNumber = " + _serialNumber + ", ");
            stringBuilder.Append("PortName = " + _portName + ", ");
            stringBuilder.Append("ConnectedClockOutputs = " + _connectedClockOutputs);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class JoystickForce
    {
    
        private double _left;
    
        private double _right;
    
        private double _push;
    
        private double _pull;
    
        private double _rightLeft;
    
        private double _pushPull;
    
        public JoystickForce()
        {
        }
    
        protected JoystickForce(JoystickForce other)
        {
            _left = other._left;
            _right = other._right;
            _push = other._push;
            _pull = other._pull;
            _rightLeft = other._rightLeft;
            _pushPull = other._pushPull;
        }
    
        /// <summary>
        /// Force applied to the left axis
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("left", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Force applied to the left axis")]
        public double Left
        {
            get
            {
                return _left;
            }
            set
            {
                _left = value;
            }
        }
    
        /// <summary>
        /// Force applied to the right axis
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("right", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Force applied to the right axis")]
        public double Right
        {
            get
            {
                return _right;
            }
            set
            {
                _right = value;
            }
        }
    
        /// <summary>
        /// Force applied to the push axis
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("push", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Force applied to the push axis")]
        public double Push
        {
            get
            {
                return _push;
            }
            set
            {
                _push = value;
            }
        }
    
        /// <summary>
        /// Force applied to the pull axis
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pull", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Force applied to the pull axis")]
        public double Pull
        {
            get
            {
                return _pull;
            }
            set
            {
                _pull = value;
            }
        }
    
        /// <summary>
        /// Signed force applied to the right and left axes combined
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("right_left", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Signed force applied to the right and left axes combined")]
        public double RightLeft
        {
            get
            {
                return _rightLeft;
            }
            set
            {
                _rightLeft = value;
            }
        }
    
        /// <summary>
        /// Signed force applied to the push and pull axes combined
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("push_pull", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Signed force applied to the push and pull axes combined")]
        public double PushPull
        {
            get
            {
                return _pushPull;
            }
            set
            {
                _pushPull = value;
            }
        }
    
        public System.IObservable<JoystickForce> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new JoystickForce(this)));
        }
    
        public System.IObservable<JoystickForce> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new JoystickForce(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Left = " + _left + ", ");
            stringBuilder.Append("Right = " + _right + ", ");
            stringBuilder.Append("Push = " + _push + ", ");
            stringBuilder.Append("Pull = " + _pull + ", ");
            stringBuilder.Append("RightLeft = " + _rightLeft + ", ");
            stringBuilder.Append("PushPull = " + _pushPull);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class LoadCellCalibrationInput
    {
    
        private int _channel;
    
        private System.Collections.Generic.List<MeasuredOffset> _offsetMeasurement;
    
        private System.Collections.Generic.List<MeasuredWeight> _weightMeasurement;
    
        public LoadCellCalibrationInput()
        {
            _offsetMeasurement = new System.Collections.Generic.List<MeasuredOffset>();
            _weightMeasurement = new System.Collections.Generic.List<MeasuredWeight>();
        }
    
        protected LoadCellCalibrationInput(LoadCellCalibrationInput other)
        {
            _channel = other._channel;
            _offsetMeasurement = other._offsetMeasurement;
            _weightMeasurement = other._weightMeasurement;
        }
    
        /// <summary>
        /// Load cell channel number available
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("channel", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Load cell channel number available")]
        public int Channel
        {
            get
            {
                return _channel;
            }
            set
            {
                _channel = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("offset_measurement")]
        public System.Collections.Generic.List<MeasuredOffset> OffsetMeasurement
        {
            get
            {
                return _offsetMeasurement;
            }
            set
            {
                _offsetMeasurement = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("weight_measurement")]
        public System.Collections.Generic.List<MeasuredWeight> WeightMeasurement
        {
            get
            {
                return _weightMeasurement;
            }
            set
            {
                _weightMeasurement = value;
            }
        }
    
        public System.IObservable<LoadCellCalibrationInput> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LoadCellCalibrationInput(this)));
        }
    
        public System.IObservable<LoadCellCalibrationInput> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LoadCellCalibrationInput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Channel = " + _channel + ", ");
            stringBuilder.Append("OffsetMeasurement = " + _offsetMeasurement + ", ");
            stringBuilder.Append("WeightMeasurement = " + _weightMeasurement);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class LoadCellCalibrationOutput
    {
    
        private int _channel;
    
        private int _offset;
    
        private double _baseline;
    
        private double _slope;
    
        private System.Collections.Generic.List<MeasuredWeight> _weightLookup;
    
        public LoadCellCalibrationOutput()
        {
            _offset = 0;
            _baseline = 0D;
            _slope = 1D;
            _weightLookup = new System.Collections.Generic.List<MeasuredWeight>();
        }
    
        protected LoadCellCalibrationOutput(LoadCellCalibrationOutput other)
        {
            _channel = other._channel;
            _offset = other._offset;
            _baseline = other._baseline;
            _slope = other._slope;
            _weightLookup = other._weightLookup;
        }
    
        /// <summary>
        /// Load cell channel number available
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("channel", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Load cell channel number available")]
        public int Channel
        {
            get
            {
                return _channel;
            }
            set
            {
                _channel = value;
            }
        }
    
        /// <summary>
        /// Load cell offset value [-255, 255]
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("offset")]
        [System.ComponentModel.DescriptionAttribute("Load cell offset value [-255, 255]")]
        public int Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                _offset = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("baseline")]
        public double Baseline
        {
            get
            {
                return _baseline;
            }
            set
            {
                _baseline = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("slope")]
        public double Slope
        {
            get
            {
                return _slope;
            }
            set
            {
                _slope = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("weight_lookup")]
        public System.Collections.Generic.List<MeasuredWeight> WeightLookup
        {
            get
            {
                return _weightLookup;
            }
            set
            {
                _weightLookup = value;
            }
        }
    
        public System.IObservable<LoadCellCalibrationOutput> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LoadCellCalibrationOutput(this)));
        }
    
        public System.IObservable<LoadCellCalibrationOutput> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LoadCellCalibrationOutput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Channel = " + _channel + ", ");
            stringBuilder.Append("Offset = " + _offset + ", ");
            stringBuilder.Append("Baseline = " + _baseline + ", ");
            stringBuilder.Append("Slope = " + _slope + ", ");
            stringBuilder.Append("WeightLookup = " + _weightLookup);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class LoadCellInput
    {
    
        private int _channel;
    
        private bool _isInverted;
    
        public LoadCellInput()
        {
            _isInverted = false;
        }
    
        protected LoadCellInput(LoadCellInput other)
        {
            _channel = other._channel;
            _isInverted = other._isInverted;
        }
    
        /// <summary>
        /// Load cell channel number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("channel", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Load cell channel number")]
        public int Channel
        {
            get
            {
                return _channel;
            }
            set
            {
                _channel = value;
            }
        }
    
        /// <summary>
        /// Whether the load cell is inverted
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("is_inverted")]
        [System.ComponentModel.DescriptionAttribute("Whether the load cell is inverted")]
        public bool IsInverted
        {
            get
            {
                return _isInverted;
            }
            set
            {
                _isInverted = value;
            }
        }
    
        public System.IObservable<LoadCellInput> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LoadCellInput(this)));
        }
    
        public System.IObservable<LoadCellInput> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LoadCellInput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Channel = " + _channel + ", ");
            stringBuilder.Append("IsInverted = " + _isInverted);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class LoadCells
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private LoadCellsCalibration _calibration;
    
        private int _whoAmI;
    
        private string _serialNumber;
    
        private string _portName;
    
        public LoadCells()
        {
            _deviceType = "LoadCells";
            _whoAmI = 1232;
        }
    
        protected LoadCells(LoadCells other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        public LoadCellsCalibration Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<LoadCells> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LoadCells(this)));
        }
    
        public System.IObservable<LoadCells> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LoadCells(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("WhoAmI = " + _whoAmI + ", ");
            stringBuilder.Append("SerialNumber = " + _serialNumber + ", ");
            stringBuilder.Append("PortName = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Load cells calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Load cells calibration class")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class LoadCellsCalibration
    {
    
        private string _deviceName;
    
        private LoadCellsCalibrationInput _input;
    
        private LoadCellsCalibrationOutput _output;
    
        private System.DateTimeOffset? _date;
    
        private string _description;
    
        private string _notes;
    
        public LoadCellsCalibration()
        {
            _deviceName = "LoadCells";
            _input = new LoadCellsCalibrationInput();
            _output = new LoadCellsCalibrationOutput();
            _description = "Calibration of the load cells system";
        }
    
        protected LoadCellsCalibration(LoadCellsCalibration other)
        {
            _deviceName = other._deviceName;
            _input = other._input;
            _output = other._output;
            _date = other._date;
            _description = other._description;
            _notes = other._notes;
        }
    
        /// <summary>
        /// Must match a device name in rig/instrument
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Must match a device name in rig/instrument")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("input", Required=Newtonsoft.Json.Required.Always)]
        public LoadCellsCalibrationInput Input
        {
            get
            {
                return _input;
            }
            set
            {
                _input = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output", Required=Newtonsoft.Json.Required.Always)]
        public LoadCellsCalibrationOutput Output
        {
            get
            {
                return _output;
            }
            set
            {
                _output = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("date")]
        public System.DateTimeOffset? Date
        {
            get
            {
                return _date;
            }
            set
            {
                _date = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<LoadCellsCalibration> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LoadCellsCalibration(this)));
        }
    
        public System.IObservable<LoadCellsCalibration> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LoadCellsCalibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("Input = " + _input + ", ");
            stringBuilder.Append("Output = " + _output + ", ");
            stringBuilder.Append("Date = " + _date + ", ");
            stringBuilder.Append("Description = " + _description + ", ");
            stringBuilder.Append("Notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class LoadCellsCalibrationInput
    {
    
        private System.Collections.Generic.List<LoadCellCalibrationInput> _channels;
    
        public LoadCellsCalibrationInput()
        {
            _channels = new System.Collections.Generic.List<LoadCellCalibrationInput>();
        }
    
        protected LoadCellsCalibrationInput(LoadCellsCalibrationInput other)
        {
            _channels = other._channels;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("channels")]
        public System.Collections.Generic.List<LoadCellCalibrationInput> Channels
        {
            get
            {
                return _channels;
            }
            set
            {
                _channels = value;
            }
        }
    
        public System.IObservable<LoadCellsCalibrationInput> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LoadCellsCalibrationInput(this)));
        }
    
        public System.IObservable<LoadCellsCalibrationInput> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LoadCellsCalibrationInput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Channels = " + _channels);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class LoadCellsCalibrationOutput
    {
    
        private System.Collections.Generic.List<LoadCellCalibrationOutput> _channels;
    
        public LoadCellsCalibrationOutput()
        {
            _channels = new System.Collections.Generic.List<LoadCellCalibrationOutput>();
        }
    
        protected LoadCellsCalibrationOutput(LoadCellsCalibrationOutput other)
        {
            _channels = other._channels;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("channels")]
        public System.Collections.Generic.List<LoadCellCalibrationOutput> Channels
        {
            get
            {
                return _channels;
            }
            set
            {
                _channels = value;
            }
        }
    
        public System.IObservable<LoadCellsCalibrationOutput> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LoadCellsCalibrationOutput(this)));
        }
    
        public System.IObservable<LoadCellsCalibrationOutput> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LoadCellsCalibrationOutput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Channels = " + _channels);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class LogNormalDistribution : Distribution
    {
    
        private LogNormalDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public LogNormalDistribution()
        {
            _distributionParameters = new LogNormalDistributionParameters();
        }
    
        protected LogNormalDistribution(LogNormalDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public LogNormalDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<LogNormalDistribution> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LogNormalDistribution(this)));
        }
    
        public System.IObservable<LogNormalDistribution> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LogNormalDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("DistributionParameters = " + _distributionParameters + ", ");
            stringBuilder.Append("TruncationParameters = " + _truncationParameters + ", ");
            stringBuilder.Append("ScalingParameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class LogNormalDistributionParameters
    {
    
        private string _family;
    
        private double _mean;
    
        private double _std;
    
        public LogNormalDistributionParameters()
        {
            _family = "LogNormal";
            _mean = 0D;
            _std = 0D;
        }
    
        protected LogNormalDistributionParameters(LogNormalDistributionParameters other)
        {
            _family = other._family;
            _mean = other._mean;
            _std = other._std;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Mean of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mean")]
        [System.ComponentModel.DescriptionAttribute("Mean of the distribution")]
        public double Mean
        {
            get
            {
                return _mean;
            }
            set
            {
                _mean = value;
            }
        }
    
        /// <summary>
        /// Standard deviation of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("std")]
        [System.ComponentModel.DescriptionAttribute("Standard deviation of the distribution")]
        public double Std
        {
            get
            {
                return _std;
            }
            set
            {
                _std = value;
            }
        }
    
        public System.IObservable<LogNormalDistributionParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LogNormalDistributionParameters(this)));
        }
    
        public System.IObservable<LogNormalDistributionParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LogNormalDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Family = " + _family + ", ");
            stringBuilder.Append("Mean = " + _mean + ", ");
            stringBuilder.Append("Std = " + _std);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ManipulatorPosition
    {
    
        private double _x;
    
        private double _y1;
    
        private double _y2;
    
        private double _z;
    
        public ManipulatorPosition()
        {
        }
    
        protected ManipulatorPosition(ManipulatorPosition other)
        {
            _x = other._x;
            _y1 = other._y1;
            _y2 = other._y2;
            _z = other._z;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("x", Required=Newtonsoft.Json.Required.Always)]
        public double X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("y1", Required=Newtonsoft.Json.Required.Always)]
        public double Y1
        {
            get
            {
                return _y1;
            }
            set
            {
                _y1 = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("y2", Required=Newtonsoft.Json.Required.Always)]
        public double Y2
        {
            get
            {
                return _y2;
            }
            set
            {
                _y2 = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("z", Required=Newtonsoft.Json.Required.Always)]
        public double Z
        {
            get
            {
                return _z;
            }
            set
            {
                _z = value;
            }
        }
    
        public System.IObservable<ManipulatorPosition> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ManipulatorPosition(this)));
        }
    
        public System.IObservable<ManipulatorPosition> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ManipulatorPosition(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("X = " + _x + ", ");
            stringBuilder.Append("Y1 = " + _y1 + ", ");
            stringBuilder.Append("Y2 = " + _y2 + ", ");
            stringBuilder.Append("Z = " + _z);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class MeasuredOffset
    {
    
        private int _offset;
    
        private double _baseline;
    
        public MeasuredOffset()
        {
        }
    
        protected MeasuredOffset(MeasuredOffset other)
        {
            _offset = other._offset;
            _baseline = other._baseline;
        }
    
        /// <summary>
        /// The applied offset resistor value[-255, 255]
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("offset", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The applied offset resistor value[-255, 255]")]
        public int Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                _offset = value;
            }
        }
    
        /// <summary>
        /// The measured baseline value
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("baseline", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The measured baseline value")]
        public double Baseline
        {
            get
            {
                return _baseline;
            }
            set
            {
                _baseline = value;
            }
        }
    
        public System.IObservable<MeasuredOffset> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new MeasuredOffset(this)));
        }
    
        public System.IObservable<MeasuredOffset> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new MeasuredOffset(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Offset = " + _offset + ", ");
            stringBuilder.Append("Baseline = " + _baseline);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class MeasuredWeight
    {
    
        private double _weight;
    
        private double _baseline;
    
        public MeasuredWeight()
        {
        }
    
        protected MeasuredWeight(MeasuredWeight other)
        {
            _weight = other._weight;
            _baseline = other._baseline;
        }
    
        /// <summary>
        /// The applied weight in grams
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("weight", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The applied weight in grams")]
        public double Weight
        {
            get
            {
                return _weight;
            }
            set
            {
                _weight = value;
            }
        }
    
        /// <summary>
        /// The measured baseline value
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("baseline", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The measured baseline value")]
        public double Baseline
        {
            get
            {
                return _baseline;
            }
            set
            {
                _baseline = value;
            }
        }
    
        public System.IObservable<MeasuredWeight> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new MeasuredWeight(this)));
        }
    
        public System.IObservable<MeasuredWeight> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new MeasuredWeight(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Weight = " + _weight + ", ");
            stringBuilder.Append("Baseline = " + _baseline);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Input for water valve calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Input for water valve calibration class")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Measurement
    {
    
        private double _valveOpenInterval;
    
        private double _valveOpenTime;
    
        private System.Collections.Generic.List<double> _waterWeight;
    
        private int _repeatCount;
    
        public Measurement()
        {
            _waterWeight = new System.Collections.Generic.List<double>();
        }
    
        protected Measurement(Measurement other)
        {
            _valveOpenInterval = other._valveOpenInterval;
            _valveOpenTime = other._valveOpenTime;
            _waterWeight = other._waterWeight;
            _repeatCount = other._repeatCount;
        }
    
        /// <summary>
        /// Time between two consecutive valve openings (s)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("valve_open_interval", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Time between two consecutive valve openings (s)")]
        public double ValveOpenInterval
        {
            get
            {
                return _valveOpenInterval;
            }
            set
            {
                _valveOpenInterval = value;
            }
        }
    
        /// <summary>
        /// Valve open interval (s)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("valve_open_time", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Valve open interval (s)")]
        public double ValveOpenTime
        {
            get
            {
                return _valveOpenTime;
            }
            set
            {
                _valveOpenTime = value;
            }
        }
    
        /// <summary>
        /// Weight of water delivered (g)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("water_weight", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Weight of water delivered (g)")]
        public System.Collections.Generic.List<double> WaterWeight
        {
            get
            {
                return _waterWeight;
            }
            set
            {
                _waterWeight = value;
            }
        }
    
        /// <summary>
        /// Number of times the valve opened.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("repeat_count", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Number of times the valve opened.")]
        public int RepeatCount
        {
            get
            {
                return _repeatCount;
            }
            set
            {
                _repeatCount = value;
            }
        }
    
        public System.IObservable<Measurement> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Measurement(this)));
        }
    
        public System.IObservable<Measurement> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Measurement(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("ValveOpenInterval = " + _valveOpenInterval + ", ");
            stringBuilder.Append("ValveOpenTime = " + _valveOpenTime + ", ");
            stringBuilder.Append("WaterWeight = " + _waterWeight + ", ");
            stringBuilder.Append("RepeatCount = " + _repeatCount);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum MicrostepResolution
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        Microstep8 = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        Microstep16 = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
        Microstep32 = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
        Microstep64 = 3,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum MotorOperationMode
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        Quiet = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        Dynamic = 1,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class NormalDistribution : Distribution
    {
    
        private NormalDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public NormalDistribution()
        {
            _distributionParameters = new NormalDistributionParameters();
        }
    
        protected NormalDistribution(NormalDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public NormalDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<NormalDistribution> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new NormalDistribution(this)));
        }
    
        public System.IObservable<NormalDistribution> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new NormalDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("DistributionParameters = " + _distributionParameters + ", ");
            stringBuilder.Append("TruncationParameters = " + _truncationParameters + ", ");
            stringBuilder.Append("ScalingParameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class NormalDistributionParameters
    {
    
        private string _family;
    
        private double _mean;
    
        private double _std;
    
        public NormalDistributionParameters()
        {
            _family = "Normal";
            _mean = 0D;
            _std = 0D;
        }
    
        protected NormalDistributionParameters(NormalDistributionParameters other)
        {
            _family = other._family;
            _mean = other._mean;
            _std = other._std;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Mean of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mean")]
        [System.ComponentModel.DescriptionAttribute("Mean of the distribution")]
        public double Mean
        {
            get
            {
                return _mean;
            }
            set
            {
                _mean = value;
            }
        }
    
        /// <summary>
        /// Standard deviation of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("std")]
        [System.ComponentModel.DescriptionAttribute("Standard deviation of the distribution")]
        public double Std
        {
            get
            {
                return _std;
            }
            set
            {
                _std = value;
            }
        }
    
        public System.IObservable<NormalDistributionParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new NormalDistributionParameters(this)));
        }
    
        public System.IObservable<NormalDistributionParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new NormalDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Family = " + _family + ", ");
            stringBuilder.Append("Mean = " + _mean + ", ");
            stringBuilder.Append("Std = " + _std);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class OperantReward : RewardPeriod
    {
    
        private Distribution _amount;
    
        private Distribution _delay;
    
        private Distribution _timeToCollect;
    
        public OperantReward()
        {
            _amount = new Distribution();
            _delay = new Distribution();
            _timeToCollect = new Distribution();
        }
    
        protected OperantReward(OperantReward other) : 
                base(other)
        {
            _amount = other._amount;
            _delay = other._delay;
            _timeToCollect = other._timeToCollect;
        }
    
        /// <summary>
        /// Amount of reward to dispense
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("amount")]
        [System.ComponentModel.DescriptionAttribute("Amount of reward to dispense")]
        public Distribution Amount
        {
            get
            {
                return _amount;
            }
            set
            {
                _amount = value;
            }
        }
    
        /// <summary>
        /// Delay before dispensing the reward
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("delay")]
        [System.ComponentModel.DescriptionAttribute("Delay before dispensing the reward")]
        public Distribution Delay
        {
            get
            {
                return _delay;
            }
            set
            {
                _delay = value;
            }
        }
    
        /// <summary>
        /// Time to collect the reward
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("time_to_collect")]
        [System.ComponentModel.DescriptionAttribute("Time to collect the reward")]
        public Distribution TimeToCollect
        {
            get
            {
                return _timeToCollect;
            }
            set
            {
                _timeToCollect = value;
            }
        }
    
        public System.IObservable<OperantReward> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OperantReward(this)));
        }
    
        public System.IObservable<OperantReward> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OperantReward(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("Amount = " + _amount + ", ");
            stringBuilder.Append("Delay = " + _delay + ", ");
            stringBuilder.Append("TimeToCollect = " + _timeToCollect);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class OperationControl
    {
    
        private ForceOperationControl _force;
    
        public OperationControl()
        {
            _force = new ForceOperationControl();
        }
    
        protected OperationControl(OperationControl other)
        {
            _force = other._force;
        }
    
        /// <summary>
        /// Operation control for force sensor
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("force")]
        [System.ComponentModel.DescriptionAttribute("Operation control for force sensor")]
        public ForceOperationControl Force
        {
            get
            {
                return _force;
            }
            set
            {
                _force = value;
            }
        }
    
        public System.IObservable<OperationControl> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OperationControl(this)));
        }
    
        public System.IObservable<OperationControl> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OperationControl(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Force = " + _force);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class PdfDistribution : Distribution
    {
    
        private PdfDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public PdfDistribution()
        {
            _distributionParameters = new PdfDistributionParameters();
        }
    
        protected PdfDistribution(PdfDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public PdfDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<PdfDistribution> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PdfDistribution(this)));
        }
    
        public System.IObservable<PdfDistribution> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PdfDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("DistributionParameters = " + _distributionParameters + ", ");
            stringBuilder.Append("TruncationParameters = " + _truncationParameters + ", ");
            stringBuilder.Append("ScalingParameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class PdfDistributionParameters
    {
    
        private string _family;
    
        private System.Collections.Generic.List<double> _pdf;
    
        private System.Collections.Generic.List<double> _index;
    
        public PdfDistributionParameters()
        {
            _family = "Pdf";
            _pdf = new System.Collections.Generic.List<double>();
            _index = new System.Collections.Generic.List<double>();
        }
    
        protected PdfDistributionParameters(PdfDistributionParameters other)
        {
            _family = other._family;
            _pdf = other._pdf;
            _index = other._index;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// The probability density function
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pdf")]
        [System.ComponentModel.DescriptionAttribute("The probability density function")]
        public System.Collections.Generic.List<double> Pdf
        {
            get
            {
                return _pdf;
            }
            set
            {
                _pdf = value;
            }
        }
    
        /// <summary>
        /// The index of the probability density function
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("index")]
        [System.ComponentModel.DescriptionAttribute("The index of the probability density function")]
        public System.Collections.Generic.List<double> Index
        {
            get
            {
                return _index;
            }
            set
            {
                _index = value;
            }
        }
    
        public System.IObservable<PdfDistributionParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PdfDistributionParameters(this)));
        }
    
        public System.IObservable<PdfDistributionParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PdfDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Family = " + _family + ", ");
            stringBuilder.Append("Pdf = " + _pdf + ", ");
            stringBuilder.Append("Index = " + _index);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class PoissonDistribution : Distribution
    {
    
        private PoissonDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public PoissonDistribution()
        {
            _distributionParameters = new PoissonDistributionParameters();
        }
    
        protected PoissonDistribution(PoissonDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public PoissonDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<PoissonDistribution> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PoissonDistribution(this)));
        }
    
        public System.IObservable<PoissonDistribution> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PoissonDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("DistributionParameters = " + _distributionParameters + ", ");
            stringBuilder.Append("TruncationParameters = " + _truncationParameters + ", ");
            stringBuilder.Append("ScalingParameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class PoissonDistributionParameters
    {
    
        private string _family;
    
        private double _rate;
    
        public PoissonDistributionParameters()
        {
            _family = "Poisson";
            _rate = 1D;
        }
    
        protected PoissonDistributionParameters(PoissonDistributionParameters other)
        {
            _family = other._family;
            _rate = other._rate;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Rate parameter of the Poisson process that generates the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rate")]
        [System.ComponentModel.DescriptionAttribute("Rate parameter of the Poisson process that generates the distribution")]
        public double Rate
        {
            get
            {
                return _rate;
            }
            set
            {
                _rate = value;
            }
        }
    
        public System.IObservable<PoissonDistributionParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PoissonDistributionParameters(this)));
        }
    
        public System.IObservable<PoissonDistributionParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PoissonDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Family = " + _family + ", ");
            stringBuilder.Append("Rate = " + _rate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Defines a quiescence settings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Defines a quiescence settings")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class QuiescencePeriod
    {
    
        private Distribution _duration;
    
        private ForceThreshold _forceThreshold;
    
        public QuiescencePeriod()
        {
            _duration = new Distribution();
            _forceThreshold = new ForceThreshold();
        }
    
        protected QuiescencePeriod(QuiescencePeriod other)
        {
            _duration = other._duration;
            _forceThreshold = other._forceThreshold;
        }
    
        /// <summary>
        /// Duration force has to stay below threshold to start the trial.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("duration")]
        [System.ComponentModel.DescriptionAttribute("Duration force has to stay below threshold to start the trial.")]
        public Distribution Duration
        {
            get
            {
                return _duration;
            }
            set
            {
                _duration = value;
            }
        }
    
        /// <summary>
        /// Threshold for the force sensors to be considered quiescent.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("force_threshold")]
        [System.ComponentModel.DescriptionAttribute("Threshold for the force sensors to be considered quiescent.")]
        public ForceThreshold ForceThreshold
        {
            get
            {
                return _forceThreshold;
            }
            set
            {
                _forceThreshold = value;
            }
        }
    
        public System.IObservable<QuiescencePeriod> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new QuiescencePeriod(this)));
        }
    
        public System.IObservable<QuiescencePeriod> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new QuiescencePeriod(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Duration = " + _duration + ", ");
            stringBuilder.Append("ForceThreshold = " + _forceThreshold);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Rect
    {
    
        private int _x;
    
        private int _y;
    
        private int _width;
    
        private int _height;
    
        public Rect()
        {
            _x = 0;
            _y = 0;
            _width = 0;
            _height = 0;
        }
    
        protected Rect(Rect other)
        {
            _x = other._x;
            _y = other._y;
            _width = other._width;
            _height = other._height;
        }
    
        /// <summary>
        /// X coordinate of the top-left corner
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("x")]
        [System.ComponentModel.DescriptionAttribute("X coordinate of the top-left corner")]
        public int X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        /// <summary>
        /// Y coordinate of the top-left corner
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("y")]
        [System.ComponentModel.DescriptionAttribute("Y coordinate of the top-left corner")]
        public int Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
            }
        }
    
        /// <summary>
        /// Width of the rectangle
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("width")]
        [System.ComponentModel.DescriptionAttribute("Width of the rectangle")]
        public int Width
        {
            get
            {
                return _width;
            }
            set
            {
                _width = value;
            }
        }
    
        /// <summary>
        /// Height of the rectangle
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("height")]
        [System.ComponentModel.DescriptionAttribute("Height of the rectangle")]
        public int Height
        {
            get
            {
                return _height;
            }
            set
            {
                _height = value;
            }
        }
    
        public System.IObservable<Rect> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Rect(this)));
        }
    
        public System.IObservable<Rect> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Rect(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("X = " + _x + ", ");
            stringBuilder.Append("Y = " + _y + ", ");
            stringBuilder.Append("Width = " + _width + ", ");
            stringBuilder.Append("Height = " + _height);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Defines a response period
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Defines a response period")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ResponsePeriod
    {
    
        private Distribution _duration;
    
        private ForceThreshold _forceThreshold;
    
        private Action _rewardedAction;
    
        private Distribution _forceDuration;
    
        public ResponsePeriod()
        {
            _duration = new Distribution();
            _forceThreshold = new ForceThreshold();
            _rewardedAction = AindIsoForceDataSchema.Action.None;
            _forceDuration = new Distribution();
        }
    
        protected ResponsePeriod(ResponsePeriod other)
        {
            _duration = other._duration;
            _forceThreshold = other._forceThreshold;
            _rewardedAction = other._rewardedAction;
            _forceDuration = other._forceDuration;
        }
    
        /// <summary>
        /// Duration of the response period. I.e. the time the animal has to make a choice.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("duration")]
        [System.ComponentModel.DescriptionAttribute("Duration of the response period. I.e. the time the animal has to make a choice.")]
        public Distribution Duration
        {
            get
            {
                return _duration;
            }
            set
            {
                _duration = value;
            }
        }
    
        /// <summary>
        /// Threshold for the force sensors to be considered active. If None, the crossings will be ignored.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("force_threshold")]
        [System.ComponentModel.DescriptionAttribute("Threshold for the force sensors to be considered active. If None, the crossings w" +
            "ill be ignored.")]
        public ForceThreshold ForceThreshold
        {
            get
            {
                return _forceThreshold;
            }
            set
            {
                _forceThreshold = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rewarded_action")]
        public Action RewardedAction
        {
            get
            {
                return _rewardedAction;
            }
            set
            {
                _rewardedAction = value;
            }
        }
    
        /// <summary>
        /// Duration the force must stay above threshold.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("force_duration")]
        [System.ComponentModel.DescriptionAttribute("Duration the force must stay above threshold.")]
        public Distribution ForceDuration
        {
            get
            {
                return _forceDuration;
            }
            set
            {
                _forceDuration = value;
            }
        }
    
        public System.IObservable<ResponsePeriod> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ResponsePeriod(this)));
        }
    
        public System.IObservable<ResponsePeriod> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ResponsePeriod(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Duration = " + _duration + ", ");
            stringBuilder.Append("ForceThreshold = " + _forceThreshold + ", ");
            stringBuilder.Append("RewardedAction = " + _rewardedAction + ", ");
            stringBuilder.Append("ForceDuration = " + _forceDuration);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Reward : RewardPeriod
    {
    
        private Distribution _amount;
    
        private Distribution _delay;
    
        public Reward()
        {
            _amount = new Distribution();
            _delay = new Distribution();
        }
    
        protected Reward(Reward other) : 
                base(other)
        {
            _amount = other._amount;
            _delay = other._delay;
        }
    
        /// <summary>
        /// Amount of reward to dispense
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("amount")]
        [System.ComponentModel.DescriptionAttribute("Amount of reward to dispense")]
        public Distribution Amount
        {
            get
            {
                return _amount;
            }
            set
            {
                _amount = value;
            }
        }
    
        /// <summary>
        /// Delay before dispensing the reward
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("delay")]
        [System.ComponentModel.DescriptionAttribute("Delay before dispensing the reward")]
        public Distribution Delay
        {
            get
            {
                return _delay;
            }
            set
            {
                _delay = value;
            }
        }
    
        public System.IObservable<Reward> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Reward(this)));
        }
    
        public System.IObservable<Reward> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Reward(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("Amount = " + _amount + ", ");
            stringBuilder.Append("Delay = " + _delay);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "reward_type")]
    [JsonInheritanceAttribute("Pavlovian", typeof(Reward))]
    [JsonInheritanceAttribute("Operant", typeof(OperantReward))]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class RewardPeriod
    {
    
        public RewardPeriod()
        {
        }
    
        protected RewardPeriod(RewardPeriod other)
        {
        }
    
        public System.IObservable<RewardPeriod> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RewardPeriod(this)));
        }
    
        public System.IObservable<RewardPeriod> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RewardPeriod(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class RigCalibration
    {
    
        private WaterValveCalibration _waterValve;
    
        public RigCalibration()
        {
            _waterValve = new WaterValveCalibration();
        }
    
        protected RigCalibration(RigCalibration other)
        {
            _waterValve = other._waterValve;
        }
    
        /// <summary>
        /// Water valve calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("water_valve", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Water valve calibration")]
        public WaterValveCalibration WaterValve
        {
            get
            {
                return _waterValve;
            }
            set
            {
                _waterValve = value;
            }
        }
    
        public System.IObservable<RigCalibration> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RigCalibration(this)));
        }
    
        public System.IObservable<RigCalibration> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RigCalibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("WaterValve = " + _waterValve);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Scalar : Distribution
    {
    
        private ScalarDistributionParameter _distributionParameters;
    
        private TruncationParameters2 _truncationParameters;
    
        private ScalingParameters2 _scalingParameters;
    
        public Scalar()
        {
            _distributionParameters = new ScalarDistributionParameter();
        }
    
        protected Scalar(Scalar other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public ScalarDistributionParameter DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        public TruncationParameters2 TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        public ScalingParameters2 ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<Scalar> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Scalar(this)));
        }
    
        public System.IObservable<Scalar> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Scalar(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("DistributionParameters = " + _distributionParameters + ", ");
            stringBuilder.Append("TruncationParameters = " + _truncationParameters + ", ");
            stringBuilder.Append("ScalingParameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ScalarDistributionParameter
    {
    
        private string _family;
    
        private double _value;
    
        public ScalarDistributionParameter()
        {
            _family = "Scalar";
            _value = 0D;
        }
    
        protected ScalarDistributionParameter(ScalarDistributionParameter other)
        {
            _family = other._family;
            _value = other._value;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// The static value of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("value")]
        [System.ComponentModel.DescriptionAttribute("The static value of the distribution")]
        public double Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    
        public System.IObservable<ScalarDistributionParameter> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ScalarDistributionParameter(this)));
        }
    
        public System.IObservable<ScalarDistributionParameter> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ScalarDistributionParameter(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Family = " + _family + ", ");
            stringBuilder.Append("Value = " + _value);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ScalingParameters
    {
    
        private double _scale;
    
        private double _offset;
    
        public ScalingParameters()
        {
            _scale = 1D;
            _offset = 0D;
        }
    
        protected ScalingParameters(ScalingParameters other)
        {
            _scale = other._scale;
            _offset = other._offset;
        }
    
        /// <summary>
        /// Scaling factor to apply on the sampled distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("scale")]
        [System.ComponentModel.DescriptionAttribute("Scaling factor to apply on the sampled distribution")]
        public double Scale
        {
            get
            {
                return _scale;
            }
            set
            {
                _scale = value;
            }
        }
    
        /// <summary>
        /// Offset factor to apply on the sampled distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("offset")]
        [System.ComponentModel.DescriptionAttribute("Offset factor to apply on the sampled distribution")]
        public double Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                _offset = value;
            }
        }
    
        public System.IObservable<ScalingParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ScalingParameters(this)));
        }
    
        public System.IObservable<ScalingParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ScalingParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Scale = " + _scale + ", ");
            stringBuilder.Append("Offset = " + _offset);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class SpinnakerCamera
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private string _serialNumber;
    
        private int _binning;
    
        private SpinnakerCameraColorProcessing _colorProcessing;
    
        private int _exposure;
    
        private double _gain;
    
        private double? _gamma;
    
        private SpinnakerCameraAdcBitDepth? _adcBitDepth;
    
        private SpinnakerCameraPixelFormat? _pixelFormat;
    
        private Rect _regionOfInterest;
    
        private VideoWriter _videoWriter;
    
        public SpinnakerCamera()
        {
            _deviceType = "SpinnakerCamera";
            _binning = 1;
            _colorProcessing = AindIsoForceDataSchema.SpinnakerCameraColorProcessing.Default;
            _exposure = 1000;
            _gain = 0D;
            _adcBitDepth = AindIsoForceDataSchema.SpinnakerCameraAdcBitDepth.Adc8bit;
            _pixelFormat = AindIsoForceDataSchema.SpinnakerCameraPixelFormat.Mono8;
            _regionOfInterest = new Rect();
        }
    
        protected SpinnakerCamera(SpinnakerCamera other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _serialNumber = other._serialNumber;
            _binning = other._binning;
            _colorProcessing = other._colorProcessing;
            _exposure = other._exposure;
            _gain = other._gain;
            _gamma = other._gamma;
            _adcBitDepth = other._adcBitDepth;
            _pixelFormat = other._pixelFormat;
            _regionOfInterest = other._regionOfInterest;
            _videoWriter = other._videoWriter;
        }
    
        /// <summary>
        /// Device type
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        [System.ComponentModel.DescriptionAttribute("Device type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Camera serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Camera serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Binning
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("binning")]
        [System.ComponentModel.DescriptionAttribute("Binning")]
        public int Binning
        {
            get
            {
                return _binning;
            }
            set
            {
                _binning = value;
            }
        }
    
        /// <summary>
        /// Color processing
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("color_processing")]
        [System.ComponentModel.DescriptionAttribute("Color processing")]
        public SpinnakerCameraColorProcessing ColorProcessing
        {
            get
            {
                return _colorProcessing;
            }
            set
            {
                _colorProcessing = value;
            }
        }
    
        /// <summary>
        /// Exposure time
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("exposure")]
        [System.ComponentModel.DescriptionAttribute("Exposure time")]
        public int Exposure
        {
            get
            {
                return _exposure;
            }
            set
            {
                _exposure = value;
            }
        }
    
        /// <summary>
        /// Gain
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gain")]
        [System.ComponentModel.DescriptionAttribute("Gain")]
        public double Gain
        {
            get
            {
                return _gain;
            }
            set
            {
                _gain = value;
            }
        }
    
        /// <summary>
        /// Gamma. If None, will disable gamma correction.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("gamma")]
        [System.ComponentModel.DescriptionAttribute("Gamma. If None, will disable gamma correction.")]
        public double? Gamma
        {
            get
            {
                return _gamma;
            }
            set
            {
                _gamma = value;
            }
        }
    
        /// <summary>
        /// ADC bit depth. If None will be left as default.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("adc_bit_depth")]
        [System.ComponentModel.DescriptionAttribute("ADC bit depth. If None will be left as default.")]
        public SpinnakerCameraAdcBitDepth? AdcBitDepth
        {
            get
            {
                return _adcBitDepth;
            }
            set
            {
                _adcBitDepth = value;
            }
        }
    
        /// <summary>
        /// Pixel format. If None will be left as default.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pixel_format")]
        [System.ComponentModel.DescriptionAttribute("Pixel format. If None will be left as default.")]
        public SpinnakerCameraPixelFormat? PixelFormat
        {
            get
            {
                return _pixelFormat;
            }
            set
            {
                _pixelFormat = value;
            }
        }
    
        /// <summary>
        /// Region of interest
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("region_of_interest")]
        [System.ComponentModel.DescriptionAttribute("Region of interest")]
        public Rect RegionOfInterest
        {
            get
            {
                return _regionOfInterest;
            }
            set
            {
                _regionOfInterest = value;
            }
        }
    
        /// <summary>
        /// Video writer. If not provided, no video will be saved.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("video_writer")]
        [System.ComponentModel.DescriptionAttribute("Video writer. If not provided, no video will be saved.")]
        public VideoWriter VideoWriter
        {
            get
            {
                return _videoWriter;
            }
            set
            {
                _videoWriter = value;
            }
        }
    
        public System.IObservable<SpinnakerCamera> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new SpinnakerCamera(this)));
        }
    
        public System.IObservable<SpinnakerCamera> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new SpinnakerCamera(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("SerialNumber = " + _serialNumber + ", ");
            stringBuilder.Append("Binning = " + _binning + ", ");
            stringBuilder.Append("ColorProcessing = " + _colorProcessing + ", ");
            stringBuilder.Append("Exposure = " + _exposure + ", ");
            stringBuilder.Append("Gain = " + _gain + ", ");
            stringBuilder.Append("Gamma = " + _gamma + ", ");
            stringBuilder.Append("AdcBitDepth = " + _adcBitDepth + ", ");
            stringBuilder.Append("PixelFormat = " + _pixelFormat + ", ");
            stringBuilder.Append("RegionOfInterest = " + _regionOfInterest + ", ");
            stringBuilder.Append("VideoWriter = " + _videoWriter);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SpinnakerCameraAdcBitDepth
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        Adc8bit = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        Adc10bit = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
        Adc12bit = 2,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SpinnakerCameraPixelFormat
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        Mono8 = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        Mono16 = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
        Rgb8packed = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
        Bayergr8 = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
        Bayerrg8 = 4,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
        Bayergb8 = 5,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
        Bayerbg8 = 6,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
        Bayergr16 = 7,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
        Bayerrg16 = 8,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
        Bayergb16 = 9,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
        Bayerbg16 = 10,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
        Mono12packed = 11,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
        Bayergr12packed = 12,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
        Bayerrg12packed = 13,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="14")]
        Bayergb12packed = 14,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
        Bayerbg12packed = 15,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
        Yuv411packed = 16,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="17")]
        Yuv422packed = 17,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="18")]
        Yuv444packed = 18,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="19")]
        Mono12p = 19,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
        Bayergr12p = 20,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="21")]
        Bayerrg12p = 21,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="22")]
        Bayergb12p = 22,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="23")]
        Bayerbg12p = 23,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
        Ycbcr8 = 24,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="25")]
        Ycbcr4228 = 25,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="26")]
        Ycbcr4118 = 26,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="27")]
        Bgr8 = 27,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="28")]
        Bgra8 = 28,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="29")]
        Mono10packed = 29,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
        Bayergr10packed = 30,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="31")]
        Bayerrg10packed = 31,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
        Bayergb10packed = 32,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="33")]
        Bayerbg10packed = 33,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="34")]
        Mono10p = 34,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="35")]
        Bayergr10p = 35,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="36")]
        Bayerrg10p = 36,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="37")]
        Bayergb10p = 37,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="38")]
        Bayerbg10p = 38,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="39")]
        Mono1p = 39,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="40")]
        Mono2p = 40,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="41")]
        Mono4p = 41,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="42")]
        Mono8s = 42,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="43")]
        Mono10 = 43,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="44")]
        Mono12 = 44,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="45")]
        Mono14 = 45,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="46")]
        Mono16s = 46,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="47")]
        Mono32f = 47,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="48")]
        Bayerbg10 = 48,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="49")]
        Bayerbg12 = 49,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="50")]
        Bayergb10 = 50,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="51")]
        Bayergb12 = 51,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="52")]
        Bayergr10 = 52,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="53")]
        Bayergr12 = 53,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="54")]
        Bayerrg10 = 54,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="55")]
        Bayerrg12 = 55,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="56")]
        Rgba8 = 56,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="57")]
        Rgba10 = 57,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="58")]
        Rgba10p = 58,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="59")]
        Rgba12 = 59,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="60")]
        Rgba12p = 60,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="61")]
        Rgba14 = 61,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="62")]
        Rgba16 = 62,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="63")]
        Rgb8 = 63,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
        Rgb8Planar = 64,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="65")]
        Rgb10 = 65,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="66")]
        Rgb10Planar = 66,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="67")]
        Rgb10p = 67,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="68")]
        Rgb10p32 = 68,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="69")]
        Rgb12 = 69,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="70")]
        Rgb12Planar = 70,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="71")]
        Rgb12p = 71,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="72")]
        Rgb14 = 72,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="73")]
        Rgb16 = 73,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="74")]
        Rgb16s = 74,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="75")]
        Rgb32f = 75,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="76")]
        Rgb16Planar = 76,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="77")]
        Rgb565p = 77,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="78")]
        Bgra10 = 78,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="79")]
        Bgra10p = 79,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="80")]
        Bgra12 = 80,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="81")]
        Bgra12p = 81,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="82")]
        Bgra14 = 82,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="83")]
        Bgra16 = 83,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="84")]
        Rgba32f = 84,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="85")]
        Bgr10 = 85,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="86")]
        Bgr10p = 86,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="87")]
        Bgr12 = 87,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="88")]
        Bgr12p = 88,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="89")]
        Bgr14 = 89,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="90")]
        Bgr16 = 90,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="91")]
        Bgr565p = 91,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="92")]
        R8 = 92,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="93")]
        R10 = 93,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="94")]
        R12 = 94,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="95")]
        R16 = 95,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="96")]
        G8 = 96,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="97")]
        G10 = 97,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="98")]
        G12 = 98,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="99")]
        G16 = 99,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="100")]
        B8 = 100,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="101")]
        B10 = 101,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="102")]
        B12 = 102,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="103")]
        B16 = 103,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="104")]
        Coord3dAbc8 = 104,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="105")]
        Coord3dAbc8Planar = 105,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="106")]
        Coord3dAbc10p = 106,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="107")]
        Coord3dAbc10pPlanar = 107,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="108")]
        Coord3dAbc12p = 108,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="109")]
        Coord3dAbc12pPlanar = 109,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="110")]
        Coord3dAbc16 = 110,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="111")]
        Coord3dAbc16Planar = 111,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="112")]
        Coord3dAbc32f = 112,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="113")]
        Coord3dAbc32fPlanar = 113,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="114")]
        Coord3dAc8 = 114,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="115")]
        Coord3dAc8Planar = 115,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="116")]
        Coord3dAc10p = 116,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="117")]
        Coord3dAc10pPlanar = 117,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="118")]
        Coord3dAc12p = 118,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="119")]
        Coord3dAc12pPlanar = 119,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="120")]
        Coord3dAc16 = 120,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="121")]
        Coord3dAc16Planar = 121,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="122")]
        Coord3dAc32f = 122,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="123")]
        Coord3dAc32fPlanar = 123,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="124")]
        Coord3dA8 = 124,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="125")]
        Coord3dA10p = 125,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="126")]
        Coord3dA12p = 126,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="127")]
        Coord3dA16 = 127,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
        Coord3dA32f = 128,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="129")]
        Coord3dB8 = 129,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="130")]
        Coord3dB10p = 130,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="131")]
        Coord3dB12p = 131,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="132")]
        Coord3dB16 = 132,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="133")]
        Coord3dB32f = 133,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="134")]
        Coord3dC8 = 134,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="135")]
        Coord3dC10p = 135,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="136")]
        Coord3dC12p = 136,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="137")]
        Coord3dC16 = 137,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="138")]
        Coord3dC32f = 138,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="139")]
        Confidence1 = 139,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="140")]
        Confidence1p = 140,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="141")]
        Confidence8 = 141,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="142")]
        Confidence16 = 142,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="143")]
        Confidence32f = 143,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ThresholdedJoystickForce
    {
    
        private bool _left;
    
        private bool _right;
    
        private bool _push;
    
        private bool _pull;
    
        private JoystickForce _joystickForce;
    
        public ThresholdedJoystickForce()
        {
            _joystickForce = new JoystickForce();
        }
    
        protected ThresholdedJoystickForce(ThresholdedJoystickForce other)
        {
            _left = other._left;
            _right = other._right;
            _push = other._push;
            _pull = other._pull;
            _joystickForce = other._joystickForce;
        }
    
        /// <summary>
        /// Whether the left force is above the threshold
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("left", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Whether the left force is above the threshold")]
        public bool Left
        {
            get
            {
                return _left;
            }
            set
            {
                _left = value;
            }
        }
    
        /// <summary>
        /// Whether the right force is above the threshold
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("right", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Whether the right force is above the threshold")]
        public bool Right
        {
            get
            {
                return _right;
            }
            set
            {
                _right = value;
            }
        }
    
        /// <summary>
        /// Whether the push force is above the threshold
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("push", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Whether the push force is above the threshold")]
        public bool Push
        {
            get
            {
                return _push;
            }
            set
            {
                _push = value;
            }
        }
    
        /// <summary>
        /// Whether the pull force is above the threshold
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pull", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Whether the pull force is above the threshold")]
        public bool Pull
        {
            get
            {
                return _pull;
            }
            set
            {
                _pull = value;
            }
        }
    
        /// <summary>
        /// Joystick force values that triggered the event
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("joystick_force", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Joystick force values that triggered the event")]
        public JoystickForce JoystickForce
        {
            get
            {
                return _joystickForce;
            }
            set
            {
                _joystickForce = value;
            }
        }
    
        public System.IObservable<ThresholdedJoystickForce> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ThresholdedJoystickForce(this)));
        }
    
        public System.IObservable<ThresholdedJoystickForce> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ThresholdedJoystickForce(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Left = " + _left + ", ");
            stringBuilder.Append("Right = " + _right + ", ");
            stringBuilder.Append("Push = " + _push + ", ");
            stringBuilder.Append("Pull = " + _pull + ", ");
            stringBuilder.Append("JoystickForce = " + _joystickForce);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class TimestampedThresholdedJoystickForce
    {
    
        private double _seconds;
    
        private ThresholdedJoystickForce _value;
    
        public TimestampedThresholdedJoystickForce()
        {
            _value = new ThresholdedJoystickForce();
        }
    
        protected TimestampedThresholdedJoystickForce(TimestampedThresholdedJoystickForce other)
        {
            _seconds = other._seconds;
            _value = other._value;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("seconds", Required=Newtonsoft.Json.Required.Always)]
        public double Seconds
        {
            get
            {
                return _seconds;
            }
            set
            {
                _seconds = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("value", Required=Newtonsoft.Json.Required.Always)]
        public ThresholdedJoystickForce Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    
        public System.IObservable<TimestampedThresholdedJoystickForce> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TimestampedThresholdedJoystickForce(this)));
        }
    
        public System.IObservable<TimestampedThresholdedJoystickForce> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TimestampedThresholdedJoystickForce(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Seconds = " + _seconds + ", ");
            stringBuilder.Append("Value = " + _value);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Defines a trial
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Defines a trial")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Trial
    {
    
        private Distribution _interTrialInterval;
    
        private QuiescencePeriod _quiescencePeriod;
    
        private ResponsePeriod _responsePeriod;
    
        private RewardPeriod _rewardPeriod;
    
        public Trial()
        {
            _interTrialInterval = new Distribution();
            _responsePeriod = new ResponsePeriod();
            _rewardPeriod = new RewardPeriod();
        }
    
        protected Trial(Trial other)
        {
            _interTrialInterval = other._interTrialInterval;
            _quiescencePeriod = other._quiescencePeriod;
            _responsePeriod = other._responsePeriod;
            _rewardPeriod = other._rewardPeriod;
        }
    
        /// <summary>
        /// Time between trials
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("inter_trial_interval")]
        [System.ComponentModel.DescriptionAttribute("Time between trials")]
        public Distribution InterTrialInterval
        {
            get
            {
                return _interTrialInterval;
            }
            set
            {
                _interTrialInterval = value;
            }
        }
    
        /// <summary>
        /// Quiescence settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("quiescence_period")]
        [System.ComponentModel.DescriptionAttribute("Quiescence settings")]
        public QuiescencePeriod QuiescencePeriod
        {
            get
            {
                return _quiescencePeriod;
            }
            set
            {
                _quiescencePeriod = value;
            }
        }
    
        /// <summary>
        /// Response settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("response_period")]
        [System.ComponentModel.DescriptionAttribute("Response settings")]
        public ResponsePeriod ResponsePeriod
        {
            get
            {
                return _responsePeriod;
            }
            set
            {
                _responsePeriod = value;
            }
        }
    
        /// <summary>
        /// Reward settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_period")]
        [System.ComponentModel.DescriptionAttribute("Reward settings")]
        public RewardPeriod RewardPeriod
        {
            get
            {
                return _rewardPeriod;
            }
            set
            {
                _rewardPeriod = value;
            }
        }
    
        public System.IObservable<Trial> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Trial(this)));
        }
    
        public System.IObservable<Trial> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Trial(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("InterTrialInterval = " + _interTrialInterval + ", ");
            stringBuilder.Append("QuiescencePeriod = " + _quiescencePeriod + ", ");
            stringBuilder.Append("ResponsePeriod = " + _responsePeriod + ", ");
            stringBuilder.Append("RewardPeriod = " + _rewardPeriod);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class TruncationParameters
    {
    
        private bool _isTruncated;
    
        private double _min;
    
        private double _max;
    
        public TruncationParameters()
        {
            _isTruncated = false;
            _min = 0D;
            _max = 0D;
        }
    
        protected TruncationParameters(TruncationParameters other)
        {
            _isTruncated = other._isTruncated;
            _min = other._min;
            _max = other._max;
        }
    
        /// <summary>
        /// Whether the distribution is truncated
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("is_truncated")]
        [System.ComponentModel.DescriptionAttribute("Whether the distribution is truncated")]
        public bool IsTruncated
        {
            get
            {
                return _isTruncated;
            }
            set
            {
                _isTruncated = value;
            }
        }
    
        /// <summary>
        /// Minimum value of the sampled distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("min")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the sampled distribution")]
        public double Min
        {
            get
            {
                return _min;
            }
            set
            {
                _min = value;
            }
        }
    
        /// <summary>
        /// Maximum value of the sampled distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("max")]
        [System.ComponentModel.DescriptionAttribute("Maximum value of the sampled distribution")]
        public double Max
        {
            get
            {
                return _max;
            }
            set
            {
                _max = value;
            }
        }
    
        public System.IObservable<TruncationParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TruncationParameters(this)));
        }
    
        public System.IObservable<TruncationParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TruncationParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("IsTruncated = " + _isTruncated + ", ");
            stringBuilder.Append("Min = " + _min + ", ");
            stringBuilder.Append("Max = " + _max);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class UniformDistribution : Distribution
    {
    
        private UniformDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public UniformDistribution()
        {
            _distributionParameters = new UniformDistributionParameters();
        }
    
        protected UniformDistribution(UniformDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public UniformDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<UniformDistribution> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new UniformDistribution(this)));
        }
    
        public System.IObservable<UniformDistribution> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new UniformDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("DistributionParameters = " + _distributionParameters + ", ");
            stringBuilder.Append("TruncationParameters = " + _truncationParameters + ", ");
            stringBuilder.Append("ScalingParameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class UniformDistributionParameters
    {
    
        private string _family;
    
        private double _min;
    
        private double _max;
    
        public UniformDistributionParameters()
        {
            _family = "Uniform";
            _min = 0D;
            _max = 0D;
        }
    
        protected UniformDistributionParameters(UniformDistributionParameters other)
        {
            _family = other._family;
            _min = other._min;
            _max = other._max;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Minimum value of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("min")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the distribution")]
        public double Min
        {
            get
            {
                return _min;
            }
            set
            {
                _min = value;
            }
        }
    
        /// <summary>
        /// Maximum value of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("max")]
        [System.ComponentModel.DescriptionAttribute("Maximum value of the distribution")]
        public double Max
        {
            get
            {
                return _max;
            }
            set
            {
                _max = value;
            }
        }
    
        public System.IObservable<UniformDistributionParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new UniformDistributionParameters(this)));
        }
    
        public System.IObservable<UniformDistributionParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new UniformDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Family = " + _family + ", ");
            stringBuilder.Append("Min = " + _min + ", ");
            stringBuilder.Append("Max = " + _max);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "video_writer_type")]
    [JsonInheritanceAttribute("FFMPEG", typeof(VideoWriterFfmpeg))]
    [JsonInheritanceAttribute("OPENCV", typeof(VideoWriterOpenCv))]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class VideoWriter
    {
    
        public VideoWriter()
        {
        }
    
        protected VideoWriter(VideoWriter other)
        {
        }
    
        public System.IObservable<VideoWriter> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VideoWriter(this)));
        }
    
        public System.IObservable<VideoWriter> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VideoWriter(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class VideoWriterFfmpeg : VideoWriter
    {
    
        private int _frameRate;
    
        private string _containerExtension;
    
        private string _outputArguments;
    
        private string _inputArguments;
    
        public VideoWriterFfmpeg()
        {
            _frameRate = 30;
            _containerExtension = "mp4";
            _outputArguments = "-vf \"scale=out_color_matrix=bt709:out_range=full,format=bgr24,scale=out_range=full\" -c:v h264_nvenc -pix_fmt yuv420p -color_range full -colorspace bt709 -color_trc linear -tune hq -preset p4 -rc vbr -cq 12 -b:v 0M -metadata author=\"Allen Institute for Neural Dynamics\" -maxrate 700M -bufsize 350M";
            _inputArguments = "-colorspace bt709 -color_primaries bt709 -color_range full -color_trc linear";
        }
    
        protected VideoWriterFfmpeg(VideoWriterFfmpeg other) : 
                base(other)
        {
            _frameRate = other._frameRate;
            _containerExtension = other._containerExtension;
            _outputArguments = other._outputArguments;
            _inputArguments = other._inputArguments;
        }
    
        /// <summary>
        /// Encoding frame rate
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [System.ComponentModel.DescriptionAttribute("Encoding frame rate")]
        public int FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        /// <summary>
        /// Container extension
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("container_extension")]
        [System.ComponentModel.DescriptionAttribute("Container extension")]
        public string ContainerExtension
        {
            get
            {
                return _containerExtension;
            }
            set
            {
                _containerExtension = value;
            }
        }
    
        /// <summary>
        /// Output arguments
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("output_arguments")]
        [System.ComponentModel.DescriptionAttribute("Output arguments")]
        public string OutputArguments
        {
            get
            {
                return _outputArguments;
            }
            set
            {
                _outputArguments = value;
            }
        }
    
        /// <summary>
        /// Input arguments
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("input_arguments")]
        [System.ComponentModel.DescriptionAttribute("Input arguments")]
        public string InputArguments
        {
            get
            {
                return _inputArguments;
            }
            set
            {
                _inputArguments = value;
            }
        }
    
        public System.IObservable<VideoWriterFfmpeg> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VideoWriterFfmpeg(this)));
        }
    
        public System.IObservable<VideoWriterFfmpeg> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VideoWriterFfmpeg(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("FrameRate = " + _frameRate + ", ");
            stringBuilder.Append("ContainerExtension = " + _containerExtension + ", ");
            stringBuilder.Append("OutputArguments = " + _outputArguments + ", ");
            stringBuilder.Append("InputArguments = " + _inputArguments);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class VideoWriterOpenCv : VideoWriter
    {
    
        private int _frameRate;
    
        private string _containerExtension;
    
        private string _fourCc;
    
        public VideoWriterOpenCv()
        {
            _frameRate = 30;
            _containerExtension = "avi";
            _fourCc = "FMP4";
        }
    
        protected VideoWriterOpenCv(VideoWriterOpenCv other) : 
                base(other)
        {
            _frameRate = other._frameRate;
            _containerExtension = other._containerExtension;
            _fourCc = other._fourCc;
        }
    
        /// <summary>
        /// Encoding frame rate
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [System.ComponentModel.DescriptionAttribute("Encoding frame rate")]
        public int FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        /// <summary>
        /// Container extension
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("container_extension")]
        [System.ComponentModel.DescriptionAttribute("Container extension")]
        public string ContainerExtension
        {
            get
            {
                return _containerExtension;
            }
            set
            {
                _containerExtension = value;
            }
        }
    
        /// <summary>
        /// Four character code
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("four_cc")]
        [System.ComponentModel.DescriptionAttribute("Four character code")]
        public string FourCc
        {
            get
            {
                return _fourCc;
            }
            set
            {
                _fourCc = value;
            }
        }
    
        public System.IObservable<VideoWriterOpenCv> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VideoWriterOpenCv(this)));
        }
    
        public System.IObservable<VideoWriterOpenCv> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VideoWriterOpenCv(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("FrameRate = " + _frameRate + ", ");
            stringBuilder.Append("ContainerExtension = " + _containerExtension + ", ");
            stringBuilder.Append("FourCc = " + _fourCc);
            return true;
        }
    }


    /// <summary>
    /// Water valve calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Water valve calibration class")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class WaterValveCalibration
    {
    
        private string _deviceName;
    
        private WaterValveCalibrationInput _input;
    
        private WaterValveCalibrationOutput _output;
    
        private System.DateTimeOffset? _date;
    
        private string _description;
    
        private string _notes;
    
        public WaterValveCalibration()
        {
            _deviceName = "WaterValve";
            _input = new WaterValveCalibrationInput();
            _output = new WaterValveCalibrationOutput();
            _description = "Calibration of the water valve delivery system";
        }
    
        protected WaterValveCalibration(WaterValveCalibration other)
        {
            _deviceName = other._deviceName;
            _input = other._input;
            _output = other._output;
            _date = other._date;
            _description = other._description;
            _notes = other._notes;
        }
    
        /// <summary>
        /// Name of the device being calibrated
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Name of the device being calibrated")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("input", Required=Newtonsoft.Json.Required.Always)]
        public WaterValveCalibrationInput Input
        {
            get
            {
                return _input;
            }
            set
            {
                _input = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output", Required=Newtonsoft.Json.Required.Always)]
        public WaterValveCalibrationOutput Output
        {
            get
            {
                return _output;
            }
            set
            {
                _output = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("date")]
        public System.DateTimeOffset? Date
        {
            get
            {
                return _date;
            }
            set
            {
                _date = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<WaterValveCalibration> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new WaterValveCalibration(this)));
        }
    
        public System.IObservable<WaterValveCalibration> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new WaterValveCalibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("Input = " + _input + ", ");
            stringBuilder.Append("Output = " + _output + ", ");
            stringBuilder.Append("Date = " + _date + ", ");
            stringBuilder.Append("Description = " + _description + ", ");
            stringBuilder.Append("Notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class WaterValveCalibrationInput
    {
    
        private System.Collections.Generic.List<Measurement> _measurements;
    
        public WaterValveCalibrationInput()
        {
            _measurements = new System.Collections.Generic.List<Measurement>();
        }
    
        protected WaterValveCalibrationInput(WaterValveCalibrationInput other)
        {
            _measurements = other._measurements;
        }
    
        /// <summary>
        /// List of measurements
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("measurements")]
        [System.ComponentModel.DescriptionAttribute("List of measurements")]
        public System.Collections.Generic.List<Measurement> Measurements
        {
            get
            {
                return _measurements;
            }
            set
            {
                _measurements = value;
            }
        }
    
        public System.IObservable<WaterValveCalibrationInput> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new WaterValveCalibrationInput(this)));
        }
    
        public System.IObservable<WaterValveCalibrationInput> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new WaterValveCalibrationInput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Measurements = " + _measurements);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Output for water valve calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Output for water valve calibration class")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class WaterValveCalibrationOutput
    {
    
        private System.Collections.Generic.Dictionary<string, double> _intervalAverage;
    
        private double _slope;
    
        private double _offset;
    
        private double? _r2;
    
        private System.Collections.Generic.List<double> _validDomain;
    
        public WaterValveCalibrationOutput()
        {
        }
    
        protected WaterValveCalibrationOutput(WaterValveCalibrationOutput other)
        {
            _intervalAverage = other._intervalAverage;
            _slope = other._slope;
            _offset = other._offset;
            _r2 = other._r2;
            _validDomain = other._validDomain;
        }
    
        /// <summary>
        /// Dictionary keyed by measured valve interval and corresponding average single event volume.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("interval_average")]
        [System.ComponentModel.DescriptionAttribute("Dictionary keyed by measured valve interval and corresponding average single even" +
            "t volume.")]
        public System.Collections.Generic.Dictionary<string, double> IntervalAverage
        {
            get
            {
                return _intervalAverage;
            }
            set
            {
                _intervalAverage = value;
            }
        }
    
        /// <summary>
        /// Slope of the linear regression : Volume(g) = Slope(g/s) * time(s) + offset(g)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("slope", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Slope of the linear regression : Volume(g) = Slope(g/s) * time(s) + offset(g)")]
        public double Slope
        {
            get
            {
                return _slope;
            }
            set
            {
                _slope = value;
            }
        }
    
        /// <summary>
        /// Offset of the linear regression : Volume(g) = Slope(g/s) * time(s) + offset(g)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("offset", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Offset of the linear regression : Volume(g) = Slope(g/s) * time(s) + offset(g)")]
        public double Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                _offset = value;
            }
        }
    
        /// <summary>
        /// R2 metric from the linear model.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("r2")]
        [System.ComponentModel.DescriptionAttribute("R2 metric from the linear model.")]
        public double? R2
        {
            get
            {
                return _r2;
            }
            set
            {
                _r2 = value;
            }
        }
    
        /// <summary>
        /// The optional time-intervals the calibration curve was calculated on.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("valid_domain")]
        [System.ComponentModel.DescriptionAttribute("The optional time-intervals the calibration curve was calculated on.")]
        public System.Collections.Generic.List<double> ValidDomain
        {
            get
            {
                return _validDomain;
            }
            set
            {
                _validDomain = value;
            }
        }
    
        public System.IObservable<WaterValveCalibrationOutput> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new WaterValveCalibrationOutput(this)));
        }
    
        public System.IObservable<WaterValveCalibrationOutput> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new WaterValveCalibrationOutput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("IntervalAverage = " + _intervalAverage + ", ");
            stringBuilder.Append("Slope = " + _slope + ", ");
            stringBuilder.Append("Offset = " + _offset + ", ");
            stringBuilder.Append("R2 = " + _r2 + ", ");
            stringBuilder.Append("ValidDomain = " + _validDomain);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "family")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class InterTrialInterval
    {
    
        public InterTrialInterval()
        {
        }
    
        protected InterTrialInterval(InterTrialInterval other)
        {
        }
    
        public System.IObservable<InterTrialInterval> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new InterTrialInterval(this)));
        }
    
        public System.IObservable<InterTrialInterval> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new InterTrialInterval(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "family")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Duration
    {
    
        public Duration()
        {
        }
    
        protected Duration(Duration other)
        {
        }
    
        public System.IObservable<Duration> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Duration(this)));
        }
    
        public System.IObservable<Duration> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Duration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "family")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ForceDuration
    {
    
        public ForceDuration()
        {
        }
    
        protected ForceDuration(ForceDuration other)
        {
        }
    
        public System.IObservable<ForceDuration> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ForceDuration(this)));
        }
    
        public System.IObservable<ForceDuration> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ForceDuration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "family")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Amount
    {
    
        public Amount()
        {
        }
    
        protected Amount(Amount other)
        {
        }
    
        public System.IObservable<Amount> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Amount(this)));
        }
    
        public System.IObservable<Amount> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Amount(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "family")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Delay
    {
    
        public Delay()
        {
        }
    
        protected Delay(Delay other)
        {
        }
    
        public System.IObservable<Delay> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Delay(this)));
        }
    
        public System.IObservable<Delay> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Delay(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "family")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class TimeToCollect
    {
    
        public TimeToCollect()
        {
        }
    
        protected TimeToCollect(TimeToCollect other)
        {
        }
    
        public System.IObservable<TimeToCollect> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TimeToCollect(this)));
        }
    
        public System.IObservable<TimeToCollect> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TimeToCollect(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class TruncationParameters2
    {
    
        public TruncationParameters2()
        {
        }
    
        protected TruncationParameters2(TruncationParameters2 other)
        {
        }
    
        public System.IObservable<TruncationParameters2> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TruncationParameters2(this)));
        }
    
        public System.IObservable<TruncationParameters2> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TruncationParameters2(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ScalingParameters2
    {
    
        public ScalingParameters2()
        {
        }
    
        protected ScalingParameters2(ScalingParameters2 other)
        {
        }
    
        public System.IObservable<ScalingParameters2> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ScalingParameters2(this)));
        }
    
        public System.IObservable<ScalingParameters2> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ScalingParameters2(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SpinnakerCameraColorProcessing
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Default")]
        Default = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="NoColorProcessing")]
        NoColorProcessing = 1,
    }


    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }

        public string Key { get; private set; }

        public System.Type Type { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";

        private readonly string _discriminatorName;

        [System.ThreadStatic]
        private static bool _isReading;

        [System.ThreadStatic]
        private static bool _isWriting;

        public JsonInheritanceConverter()
        {
            _discriminatorName = DefaultDiscriminatorName;
        }

        public JsonInheritanceConverter(string discriminatorName)
        {
            _discriminatorName = discriminatorName;
        }

        public string DiscriminatorName { get { return _discriminatorName; } }

        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;

                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminatorName, GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }

        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }

        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;

            var discriminatorValue = jObject.GetValue(_discriminatorName);
            var discriminator = discriminatorValue != null ? Newtonsoft.Json.Linq.Extensions.Value<string>(discriminatorValue) : null;
            var subtype = GetObjectSubtype(objectType, discriminator);

            var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
            if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminatorName))
            {
                jObject.Remove(_discriminatorName);
            }

            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }

        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }

            return objectType;
        }

        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }

            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Block>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BlockGenerator>))]
    public partial class MatchBlockStatistics : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(BlockStatistics);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchBlockStatistics),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<BlockStatistics> source)
            where TResult : BlockStatistics
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<BlockStatistics>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Scalar>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BetaDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BinomialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ExponentialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GammaDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LogNormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PdfDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<UniformDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PoissonDistribution>))]
    public partial class MatchDistribution : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(Distribution);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchDistribution),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<Distribution> source)
            where TResult : Distribution
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<Distribution>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Reward>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OperantReward>))]
    public partial class MatchRewardPeriod : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(RewardPeriod);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchRewardPeriod),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<RewardPeriod> source)
            where TResult : RewardPeriod
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<RewardPeriod>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriterFfmpeg>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriterOpenCv>))]
    public partial class MatchVideoWriter : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(VideoWriter);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchVideoWriter),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<VideoWriter> source)
            where TResult : VideoWriter
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<VideoWriter>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    public partial class MatchInterTrialInterval : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(InterTrialInterval);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchInterTrialInterval),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<InterTrialInterval> source)
            where TResult : InterTrialInterval
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<InterTrialInterval>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    public partial class MatchDuration : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(Duration);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchDuration),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<Duration> source)
            where TResult : Duration
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<Duration>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    public partial class MatchForceDuration : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(ForceDuration);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchForceDuration),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<ForceDuration> source)
            where TResult : ForceDuration
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<ForceDuration>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    public partial class MatchAmount : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(Amount);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchAmount),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<Amount> source)
            where TResult : Amount
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<Amount>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    public partial class MatchDelay : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(Delay);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchDelay),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<Delay> source)
            where TResult : Delay
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<Delay>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    public partial class MatchTimeToCollect : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(TimeToCollect);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchTimeToCollect),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<TimeToCollect> source)
            where TResult : TimeToCollect
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<TimeToCollect>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [Bonsai.CombinatorAttribute()]
    public partial class SerializeToJson
    {
    
        public Newtonsoft.Json.Formatting Formatting { get; set; }

        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            var formatting = Formatting;
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value, formatting));
        }

        public System.IObservable<string> Process(System.IObservable<AindBehaviorSessionModel> source)
        {
            return Process<AindBehaviorSessionModel>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindIsoForceRig> source)
        {
            return Process<AindIsoForceRig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindIsoForceTaskLogic> source)
        {
            return Process<AindIsoForceTaskLogic>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindIsoForceTaskParameters> source)
        {
            return Process<AindIsoForceTaskParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindManipulatorAdditionalSettings> source)
        {
            return Process<AindManipulatorAdditionalSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindManipulatorCalibration> source)
        {
            return Process<AindManipulatorCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindManipulatorCalibrationInput> source)
        {
            return Process<AindManipulatorCalibrationInput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindManipulatorCalibrationOutput> source)
        {
            return Process<AindManipulatorCalibrationOutput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindManipulatorDevice> source)
        {
            return Process<AindManipulatorDevice>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AxisConfiguration> source)
        {
            return Process<AxisConfiguration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BaseModel> source)
        {
            return Process<BaseModel>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BetaDistribution> source)
        {
            return Process<BetaDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BetaDistributionParameters> source)
        {
            return Process<BetaDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BinomialDistribution> source)
        {
            return Process<BinomialDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BinomialDistributionParameters> source)
        {
            return Process<BinomialDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Block> source)
        {
            return Process<Block>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BlockGenerator> source)
        {
            return Process<BlockGenerator>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BlockStatistics> source)
        {
            return Process<BlockStatistics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CameraControllerSpinnakerCamera> source)
        {
            return Process<CameraControllerSpinnakerCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ConnectedClockOutput> source)
        {
            return Process<ConnectedClockOutput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CrossingOutcome> source)
        {
            return Process<CrossingOutcome>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Distribution> source)
        {
            return Process<Distribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Environment> source)
        {
            return Process<Environment>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ExponentialDistribution> source)
        {
            return Process<ExponentialDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ExponentialDistributionParameters> source)
        {
            return Process<ExponentialDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ForceOperationControl> source)
        {
            return Process<ForceOperationControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ForceThreshold> source)
        {
            return Process<ForceThreshold>(source);
        }

        public System.IObservable<string> Process(System.IObservable<GammaDistribution> source)
        {
            return Process<GammaDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<GammaDistributionParameters> source)
        {
            return Process<GammaDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpBehavior> source)
        {
            return Process<HarpBehavior>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpEnvironmentSensor> source)
        {
            return Process<HarpEnvironmentSensor>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpLicketySplit> source)
        {
            return Process<HarpLicketySplit>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpWhiteRabbit> source)
        {
            return Process<HarpWhiteRabbit>(source);
        }

        public System.IObservable<string> Process(System.IObservable<JoystickForce> source)
        {
            return Process<JoystickForce>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LoadCellCalibrationInput> source)
        {
            return Process<LoadCellCalibrationInput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LoadCellCalibrationOutput> source)
        {
            return Process<LoadCellCalibrationOutput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LoadCellInput> source)
        {
            return Process<LoadCellInput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LoadCells> source)
        {
            return Process<LoadCells>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LoadCellsCalibration> source)
        {
            return Process<LoadCellsCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LoadCellsCalibrationInput> source)
        {
            return Process<LoadCellsCalibrationInput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LoadCellsCalibrationOutput> source)
        {
            return Process<LoadCellsCalibrationOutput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LogNormalDistribution> source)
        {
            return Process<LogNormalDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LogNormalDistributionParameters> source)
        {
            return Process<LogNormalDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ManipulatorPosition> source)
        {
            return Process<ManipulatorPosition>(source);
        }

        public System.IObservable<string> Process(System.IObservable<MeasuredOffset> source)
        {
            return Process<MeasuredOffset>(source);
        }

        public System.IObservable<string> Process(System.IObservable<MeasuredWeight> source)
        {
            return Process<MeasuredWeight>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Measurement> source)
        {
            return Process<Measurement>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NormalDistribution> source)
        {
            return Process<NormalDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NormalDistributionParameters> source)
        {
            return Process<NormalDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OperantReward> source)
        {
            return Process<OperantReward>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OperationControl> source)
        {
            return Process<OperationControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PdfDistribution> source)
        {
            return Process<PdfDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PdfDistributionParameters> source)
        {
            return Process<PdfDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PoissonDistribution> source)
        {
            return Process<PoissonDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PoissonDistributionParameters> source)
        {
            return Process<PoissonDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<QuiescencePeriod> source)
        {
            return Process<QuiescencePeriod>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Rect> source)
        {
            return Process<Rect>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ResponsePeriod> source)
        {
            return Process<ResponsePeriod>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Reward> source)
        {
            return Process<Reward>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RewardPeriod> source)
        {
            return Process<RewardPeriod>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RigCalibration> source)
        {
            return Process<RigCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Scalar> source)
        {
            return Process<Scalar>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ScalarDistributionParameter> source)
        {
            return Process<ScalarDistributionParameter>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ScalingParameters> source)
        {
            return Process<ScalingParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SpinnakerCamera> source)
        {
            return Process<SpinnakerCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ThresholdedJoystickForce> source)
        {
            return Process<ThresholdedJoystickForce>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TimestampedThresholdedJoystickForce> source)
        {
            return Process<TimestampedThresholdedJoystickForce>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Trial> source)
        {
            return Process<Trial>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TruncationParameters> source)
        {
            return Process<TruncationParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<UniformDistribution> source)
        {
            return Process<UniformDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<UniformDistributionParameters> source)
        {
            return Process<UniformDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VideoWriter> source)
        {
            return Process<VideoWriter>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VideoWriterFfmpeg> source)
        {
            return Process<VideoWriterFfmpeg>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VideoWriterOpenCv> source)
        {
            return Process<VideoWriterOpenCv>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WaterValveCalibration> source)
        {
            return Process<WaterValveCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WaterValveCalibrationInput> source)
        {
            return Process<WaterValveCalibrationInput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WaterValveCalibrationOutput> source)
        {
            return Process<WaterValveCalibrationOutput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<InterTrialInterval> source)
        {
            return Process<InterTrialInterval>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Duration> source)
        {
            return Process<Duration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ForceDuration> source)
        {
            return Process<ForceDuration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Amount> source)
        {
            return Process<Amount>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Delay> source)
        {
            return Process<Delay>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TimeToCollect> source)
        {
            return Process<TimeToCollect>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TruncationParameters2> source)
        {
            return Process<TruncationParameters2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ScalingParameters2> source)
        {
            return Process<ScalingParameters2>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindBehaviorSessionModel>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindIsoForceRig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindIsoForceTaskLogic>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindIsoForceTaskParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindManipulatorAdditionalSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindManipulatorCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindManipulatorCalibrationInput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindManipulatorCalibrationOutput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindManipulatorDevice>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AxisConfiguration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BaseModel>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BetaDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BetaDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BinomialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BinomialDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Block>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BlockGenerator>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BlockStatistics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CameraControllerSpinnakerCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ConnectedClockOutput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CrossingOutcome>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Distribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Environment>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ExponentialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ExponentialDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ForceOperationControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ForceThreshold>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GammaDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GammaDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpBehavior>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpEnvironmentSensor>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpLicketySplit>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpWhiteRabbit>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<JoystickForce>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LoadCellCalibrationInput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LoadCellCalibrationOutput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LoadCellInput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LoadCells>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LoadCellsCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LoadCellsCalibrationInput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LoadCellsCalibrationOutput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LogNormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LogNormalDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ManipulatorPosition>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<MeasuredOffset>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<MeasuredWeight>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Measurement>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NormalDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OperantReward>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OperationControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PdfDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PdfDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PoissonDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PoissonDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<QuiescencePeriod>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Rect>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ResponsePeriod>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Reward>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardPeriod>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RigCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Scalar>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ScalarDistributionParameter>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ScalingParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SpinnakerCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ThresholdedJoystickForce>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TimestampedThresholdedJoystickForce>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Trial>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TruncationParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<UniformDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<UniformDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriter>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriterFfmpeg>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriterOpenCv>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WaterValveCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WaterValveCalibrationInput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WaterValveCalibrationOutput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<InterTrialInterval>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Duration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ForceDuration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Amount>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Delay>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TimeToCollect>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TruncationParameters2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ScalingParameters2>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindBehaviorSessionModel>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }
}